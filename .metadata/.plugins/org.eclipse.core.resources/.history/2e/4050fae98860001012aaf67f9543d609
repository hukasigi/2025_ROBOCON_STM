///* USER CODE BEGIN Header */
///**
//  ******************************************************************************
//  * @file           : main.c
//  * @brief          : Main program body
//  ******************************************************************************
//  * @attention
//  *
//  * Copyright (c) 2025 STMicroelectronics.
//  * All rights reserved.
//  *
//  * This software is licensed under terms that can be found in the LICENSE file
//  * in the root directory of this software component.
//  * If no LICENSE file comes with this software, it is provided AS-IS.
//  *
//  ******************************************************************************
//  */
///* USER CODE END Header */
///* Includes ------------------------------------------------------------------*/
//#include "main.h"
//#include "stdio.h"
//
///* Private includes ----------------------------------------------------------*/
///* USER CODE BEGIN Includes */
//
///* USER CODE END Includes */
//
///* Private typedef -----------------------------------------------------------*/
///* USER CODE BEGIN PTD */
//
///* USER CODE END PTD */
//
///* Private define ------------------------------------------------------------*/
///* USER CODE BEGIN PD */
//
///* USER CODE END PD */
//
///* Private macro -------------------------------------------------------------*/
///* USER CODE BEGIN PM */
//
///* USER CODE END PM */
//
///* Private variables ---------------------------------------------------------*/
//CAN_HandleTypeDef hcan;
//
//UART_HandleTypeDef huart2;
//
///* USER CODE BEGIN PV */
//
///* USER CODE END PV */
//
///* Private function prototypes -----------------------------------------------*/
//void SystemClock_Config(void);
//static void MX_GPIO_Init(void);
//static void MX_USART2_UART_Init(void);
//static void MX_CAN_Init(void);
///* USER CODE BEGIN PFP */
//
///* USER CODE END PFP */
//
///* Private user code ---------------------------------------------------------*/
///* USER CODE BEGIN 0 */
//uint8_t use_data[8];
//uint32_t id;
//
//void CAN_TX(uint32_t recipient) {
//    //送信用インスタンス等
//	CAN_TxHeaderTypeDef TxHeader;
//	uint32_t TxMailbox;
//	uint8_t TxData[8];
//    //送信メールボックスに空きがあったら送信開始
//	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)) {
//        //送信用インスタンスの設定
//		TxHeader.StdId = recipient;// 受取手のCANのID
//		TxHeader.RTR = CAN_RTR_DATA;
//		TxHeader.IDE = CAN_ID_STD;
//		TxHeader.DLC = 8;//データ長を8byteに設定
//		TxHeader.TransmitGlobalTime = DISABLE;
//        //各データ
//		TxData[0] = 0;
//		TxData[1] = 1;
//		TxData[2] = 2;
//		TxData[3] = 3;
//		TxData[4] = 4;
//		TxData[5] = 5;
//		TxData[6] = 6;
//		TxData[7] = 7;
//        //CANメッセージを送信
//		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
//			Error_Handler();
//		}
//	}
//}
//
//void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
//	CAN_RxHeaderTypeDef RxHeader;//受信メッセージの情報が格納されるインスタンス
//	uint8_t RxData[8];//受信したデータを一時保存する配列
//	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)== HAL_OK) {
//		id = RxHeader.StdId; // RxHeaderの中に入っているidを取り出す
//		if (id == 0x001){
//			for (int i = 0; i <= 7; i++){
//    				use_data[i] = RxData[i];
//			}
//		}
//	}
//}
//
//
///* USER CODE END 0 */
//
///**
//  * @brief  The application entry point.
//  * @retval int
//  */
//int main(void)
//{
//
//  /* USER CODE BEGIN 1 */
//	setbuf(stdout, NULL);
//
//  /* USER CODE END 1 */
//
//  /* MCU Configuration--------------------------------------------------------*/
//
//  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();
//
//  /* USER CODE BEGIN Init */
//
//  /* USER CODE END Init */
//
//  /* Configure the system clock */
//  SystemClock_Config();
//
//  /* USER CODE BEGIN SysInit */
//
//  /* USER CODE END SysInit */
//
//  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
//  MX_CAN_Init();
//	/* USER CODE BEGIN 2 */
//
//	// CANスタート
//	HAL_CAN_Start(&hcan);
//	// 割り込み有効
//	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
//	/* USER CODE END 2 */
//
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
//  while (1)
//  {
//    /* USER CODE END WHILE */
//      printf("Receiver\r\n");
//      printf("%d\r\n", use_data[0]);
//      printf("%d\r\n", use_data[1]);
//      printf("%d\r\n", use_data[2]);
//      printf("%d\r\n", use_data[3]);
//      printf("%d\r\n", use_data[4]);
//      printf("%d\r\n", use_data[5]);
//      printf("%d\r\n", use_data[6]);
//      printf("%d\r\n", use_data[7]);
//      HAL_Delay(100);
//
//    /* USER CODE BEGIN 3 */
//  }
//  /* USER CODE END 3 */
//}
//
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
//void SystemClock_Config(void)
//{
//  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
//  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
//
//  /** Initializes the RCC Oscillators according to the specified parameters
//  * in the RCC_OscInitTypeDef structure.
//  */
//  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
//  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
//  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
//  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
//  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
//  {
//    Error_Handler();
//  }
//
//  /** Initializes the CPU, AHB and APB buses clocks
//  */
//  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
//                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
//  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
//  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
//  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
//  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
//
//  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
//  {
//    Error_Handler();
//  }
//}
//
///**
//  * @brief CAN Initialization Function
//  * @param None
//  * @retval None
//  */
//static void MX_CAN_Init(void)
//{
//
//  /* USER CODE BEGIN CAN_Init 0 */
//
//  /* USER CODE END CAN_Init 0 */
//
//  /* USER CODE BEGIN CAN_Init 1 */
//
//  /* USER CODE END CAN_Init 1 */
//  hcan.Instance = CAN;
//  hcan.Init.Prescaler = 1;
//  hcan.Init.Mode = CAN_MODE_NORMAL;
//  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
//  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
//  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
//  hcan.Init.TimeTriggeredMode = DISABLE;
//  hcan.Init.AutoBusOff = DISABLE;
//  hcan.Init.AutoWakeUp = DISABLE;
//  hcan.Init.AutoRetransmission = DISABLE;
//  hcan.Init.ReceiveFifoLocked = DISABLE;
//  hcan.Init.TransmitFifoPriority = DISABLE;
//  if (HAL_CAN_Init(&hcan) != HAL_OK)
//  {
//    Error_Handler();
//  }
//  /* USER CODE BEGIN CAN_Init 2 */
//  CAN_FilterTypeDef filter;
//  filter.FilterIdHigh         = 0x001 << 5;                  // フィルターID1
//  filter.FilterIdLow          = 0x002 << 5;                  // フィルターID2
//  filter.FilterMaskIdHigh     = 0x003 << 5;                  // フィルターID3
//  filter.FilterMaskIdLow      = 0x004 << 5;    // フィルターID4
//  filter.FilterScale          = CAN_FILTERSCALE_16BIT; // 16モード
//  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
//  filter.FilterBank           = 0;
//  filter.FilterMode           = CAN_FILTERMODE_IDLIST; // IDリストモード
//  filter.SlaveStartFilterBank = 14;
//  filter.FilterActivation     = ENABLE;
//
//  HAL_CAN_ConfigFilter(&hcan, &filter);
//
//
//  /* USER CODE END CAN_Init 2 */
//
//}
//
///**
//  * @brief USART2 Initialization Function
//  * @param None
//  * @retval None
//  */
//static void MX_USART2_UART_Init(void)
//{
//
//  /* USER CODE BEGIN USART2_Init 0 */
//
//  /* USER CODE END USART2_Init 0 */
//
//  /* USER CODE BEGIN USART2_Init 1 */
//
//  /* USER CODE END USART2_Init 1 */
//  huart2.Instance = USART2;
//  huart2.Init.BaudRate = 9600;
//  huart2.Init.WordLength = UART_WORDLENGTH_8B;
//  huart2.Init.StopBits = UART_STOPBITS_1;
//  huart2.Init.Parity = UART_PARITY_NONE;
//  huart2.Init.Mode = UART_MODE_TX_RX;
//  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
//  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
//  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
//  if (HAL_UART_Init(&huart2) != HAL_OK)
//  {
//    Error_Handler();
//  }
//  /* USER CODE BEGIN USART2_Init 2 */
//
//  /* USER CODE END USART2_Init 2 */
//
//}
//
///**
//  * @brief GPIO Initialization Function
//  * @param None
//  * @retval None
//  */
//static void MX_GPIO_Init(void)
//{
//  /* USER CODE BEGIN MX_GPIO_Init_1 */
//
//  /* USER CODE END MX_GPIO_Init_1 */
//
//  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOA_CLK_ENABLE();
//
//  /* USER CODE BEGIN MX_GPIO_Init_2 */
//
//  /* USER CODE END MX_GPIO_Init_2 */
//}
///* USER CODE BEGIN 4 */
//int _write(int file, char *ptr, int len)
//{
//  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
//  return len;
//}
///* USER CODE END 4 */
//
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
//void Error_Handler(void)
//{
//  /* USER CODE BEGIN Error_Handler_Debug */
//  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
//  while (1)
//  {
//  }
//  /* USER CODE END Error_Handler_Debug */
//}
//#ifdef USE_FULL_ASSERT
///**
//  * @brief  Reports the name of the source file and the source line number
//  *         where the assert_param error has occurred.
//  * @param  file: pointer to the source file name
//  * @param  line: assert_param error line source number
//  * @retval None
//  */
//void assert_failed(uint8_t *file, uint32_t line)
//{
//  /* USER CODE BEGIN 6 */
//  /* User can add his own implementation to report the file name and line number,
//     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
//  /* USER CODE END 6 */
//}
//#endif /* USE_FULL_ASSERT */



******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - CAN受信最適化版
  ******************************************************************************
  */
/* USER CODE END Header */

#include "main.h"
#include "stdio.h"

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t use_data[8] = {0}; // 初期化
uint32_t message_count = 0; // 受信カウンタ
uint8_t data_updated = 0;   // 新しいデータが来たかのフラグ
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);

/* USER CODE BEGIN 0 */

// CAN送信関数（テスト用）
void CAN_TX(uint32_t recipient) {
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8];

    if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
        TxHeader.StdId = recipient;
        TxHeader.RTR = CAN_RTR_DATA;
        TxHeader.IDE = CAN_ID_STD;
        TxHeader.DLC = 8;
        TxHeader.TransmitGlobalTime = DISABLE;

        // テストデータ
        for(int i = 0; i < 8; i++) {
            TxData[i] = i + 10; // 10, 11, 12, 13, 14, 15, 16, 17
        }

        if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
            printf("CAN送信成功: ID=0x%03X\r\n", recipient);
        } else {
            printf("CAN送信失敗\r\n");
        }
    }
}

// CAN受信割り込みコールバック - 最適化版
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
        uint32_t id = RxHeader.StdId;

        // ID 0x001のメッセージのみ処理
        if (id == 0x001) {
            // データをuse_data配列にコピー
            for (int i = 0; i < 8; i++) {
                use_data[i] = RxData[i];
            }
            message_count++;
            data_updated = 1;

            printf("CAN受信: ID=0x%03X, Count=%lu\r\n", id, message_count);
        }
    }
}

/* USER CODE END 0 */

int main(void) {
    /* USER CODE BEGIN 1 */
    setbuf(stdout, NULL);
    /* USER CODE END 1 */

    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_CAN_Init();

    /* USER CODE BEGIN 2 */
    printf("\r\n=== CAN受信機 開始 ===\r\n");

    // CAN開始
    if (HAL_CAN_Start(&hcan) != HAL_OK) {
        printf("CAN開始エラー\r\n");
        Error_Handler();
    }

    // 受信割り込み有効化
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
        printf("CAN割り込み有効化エラー\r\n");
        Error_Handler();
    }

    printf("CAN初期化完了 - 受信待機中...\r\n");
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    uint32_t last_print = 0;

    while (1) {
        /* USER CODE END WHILE */

        // 100msごとに状態表示
        if (HAL_GetTick() - last_print >= 100) {
            if (data_updated) {
                printf("=== 受信データ ===\r\n");
                for (int i = 0; i < 8; i++) {
                    printf("use_data[%d] = %d\r\n", i, use_data[i]);
                }
                printf("受信回数: %lu\r\n", message_count);
                printf("================\r\n");
                data_updated = 0;
            } else {
                printf("受信待機中... (Count: %lu)\r\n", message_count);
            }
            last_print = HAL_GetTick();
        }

        // テスト送信（オプション - 必要に応じてコメントアウト）
        // static uint32_t last_tx = 0;
        // if (HAL_GetTick() - last_tx >= 5000) { // 5秒ごと
        //     CAN_TX(0x002);
        //     last_tx = HAL_GetTick();
        // }

        /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
        Error_Handler();
    }
}

/**
  * @brief CAN Initialization Function - 最適化版
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void) {
    hcan.Instance = CAN;
    hcan.Init.Prescaler = 1;
    hcan.Init.Mode = CAN_MODE_NORMAL;
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
    hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
    hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
    hcan.Init.TimeTriggeredMode = DISABLE;
    hcan.Init.AutoBusOff = DISABLE;
    hcan.Init.AutoWakeUp = DISABLE;
    hcan.Init.AutoRetransmission = DISABLE;
    hcan.Init.ReceiveFifoLocked = DISABLE;
    hcan.Init.TransmitFifoPriority = DISABLE;

    if (HAL_CAN_Init(&hcan) != HAL_OK) {
        Error_Handler();
    }

    /* USER CODE BEGIN CAN_Init 2 */
    // 簡単なフィルタ設定 - ID 0x001のみ受信
    CAN_FilterTypeDef filter;
    filter.FilterIdHigh = 0x001 << 5;        // 受信したいID
    filter.FilterIdLow = 0x000;
    filter.FilterMaskIdHigh = 0x7FF << 5;    // 全ビット一致
    filter.FilterMaskIdLow = 0x000;
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
    filter.FilterBank = 0;
    filter.FilterActivation = ENABLE;
    filter.SlaveStartFilterBank = 14;

    if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE END CAN_Init 2 */
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;  // 高速化
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
    __HAL_RCC_GPIOF_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
    return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
    __disable_irq();
    while (1) {
        // エラー時はここで停止
    }
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line) {
    /* USER CODE BEGIN 6 */
    printf("Assert failed: file %s on line %d\r\n", file, line);
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
