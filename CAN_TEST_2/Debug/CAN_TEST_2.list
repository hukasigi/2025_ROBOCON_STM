
CAN_TEST_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004868  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000230  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000add2  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001926  00000000  00000000  00010e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00012790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000646  00000000  00000000  00012fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7bd  00000000  00000000  00013616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af6c  00000000  00000000  0002edd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f2d6  00000000  00000000  00039d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d9015  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002938  00000000  00000000  000d9058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000db990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049e0 	.word	0x080049e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080049e0 	.word	0x080049e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <CAN_TX>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t use_data[8];
uint32_t id;
int i = 0;
void CAN_TX(uint32_t recipient) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	@ 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    //送信用インスタンス等
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t TxData[8];
    //送信メールボックスに空きがあったら送信開始
	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)) {
 8000278:	4820      	ldr	r0, [pc, #128]	@ (80002fc <CAN_TX+0x8c>)
 800027a:	f000 fee6 	bl	800104a <HAL_CAN_GetTxMailboxesFreeLevel>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d036      	beq.n	80002f2 <CAN_TX+0x82>
        //送信用インスタンスの設定
		TxHeader.StdId = recipient;// 受取手のCANのID
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.IDE = CAN_ID_STD;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
		TxHeader.DLC = 8;//データ長を8byteに設定
 8000290:	2308      	movs	r3, #8
 8000292:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.TransmitGlobalTime = DISABLE;
 8000294:	2300      	movs	r3, #0
 8000296:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        //各データ
		TxData[0] = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	733b      	strb	r3, [r7, #12]
		TxData[1] = 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	737b      	strb	r3, [r7, #13]
		TxData[2] = 2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	73bb      	strb	r3, [r7, #14]
		TxData[3] = 3;
 80002a6:	2303      	movs	r3, #3
 80002a8:	73fb      	strb	r3, [r7, #15]
		TxData[4] = 4;
 80002aa:	2304      	movs	r3, #4
 80002ac:	743b      	strb	r3, [r7, #16]
		TxData[5] = 5;
 80002ae:	2305      	movs	r3, #5
 80002b0:	747b      	strb	r3, [r7, #17]
		TxData[6] = 6;
 80002b2:	2306      	movs	r3, #6
 80002b4:	74bb      	strb	r3, [r7, #18]
		if(i == 10){
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <CAN_TX+0x90>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b0a      	cmp	r3, #10
 80002bc:	d102      	bne.n	80002c4 <CAN_TX+0x54>
			i=0;
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <CAN_TX+0x90>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
		}
		TxData[7] = i;
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <CAN_TX+0x90>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	74fb      	strb	r3, [r7, #19]
        //CANメッセージを送信
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	f107 020c 	add.w	r2, r7, #12
 80002d4:	f107 0118 	add.w	r1, r7, #24
 80002d8:	4808      	ldr	r0, [pc, #32]	@ (80002fc <CAN_TX+0x8c>)
 80002da:	f000 fde6 	bl	8000eaa <HAL_CAN_AddTxMessage>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <CAN_TX+0x78>
			Error_Handler();
 80002e4:	f000 f996 	bl	8000614 <Error_Handler>
		}
		i++;
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <CAN_TX+0x90>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <CAN_TX+0x90>)
 80002f0:	6013      	str	r3, [r2, #0]
	}
}
 80002f2:	bf00      	nop
 80002f4:	3730      	adds	r7, #48	@ 0x30
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000084 	.word	0x20000084
 8000300:	20000140 	.word	0x20000140

08000304 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b08c      	sub	sp, #48	@ 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;//受信メッセージの情報が格納されるインスタンス
	uint8_t RxData[8];//受信したデータを一時保存する配列
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)== HAL_OK) {
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	f107 0210 	add.w	r2, r7, #16
 8000314:	2100      	movs	r1, #0
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 fecc 	bl	80010b4 <HAL_CAN_GetRxMessage>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d119      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		id = RxHeader.StdId; // RxHeaderの中に入っているidを取り出す
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000326:	6013      	str	r3, [r2, #0]
		if (id == 0x001){
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d112      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			for (int i = 0; i <= 7; i++){
 8000330:	2300      	movs	r3, #0
 8000332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000334:	e00c      	b.n	8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
    				use_data[i] = RxData[i];
 8000336:	f107 0208 	add.w	r2, r7, #8
 800033a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800033c:	4413      	add	r3, r2
 800033e:	7819      	ldrb	r1, [r3, #0]
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000344:	4413      	add	r3, r2
 8000346:	460a      	mov	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <= 7; i++){
 800034a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800034c:	3301      	adds	r3, #1
 800034e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000352:	2b07      	cmp	r3, #7
 8000354:	ddef      	ble.n	8000336 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			}
		}
	}
}
 8000356:	bf00      	nop
 8000358:	3730      	adds	r7, #48	@ 0x30
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000013c 	.word	0x2000013c
 8000364:	20000134 	.word	0x20000134

08000368 <_write>:

int _write(int file, char *ptr, int len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	b29a      	uxth	r2, r3
 8000378:	230a      	movs	r3, #10
 800037a:	68b9      	ldr	r1, [r7, #8]
 800037c:	4803      	ldr	r0, [pc, #12]	@ (800038c <_write+0x24>)
 800037e:	f002 ff03 	bl	8003188 <HAL_UART_Transmit>
  return len;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200000ac 	.word	0x200000ac

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000394:	4b29      	ldr	r3, [pc, #164]	@ (800043c <main+0xac>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f003 fc01 	bl	8003ba4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 faef 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f853 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 f90f 	bl	80005cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ae:	f000 f8dd 	bl	800056c <MX_USART2_UART_Init>
  MX_CAN_Init();
 80003b2:	f000 f889 	bl	80004c8 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	// CANスタート
	HAL_CAN_Start(&hcan);
 80003b6:	4822      	ldr	r0, [pc, #136]	@ (8000440 <main+0xb0>)
 80003b8:	f000 fd33 	bl	8000e22 <HAL_CAN_Start>
	// 割り込み有効
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003bc:	2102      	movs	r1, #2
 80003be:	4820      	ldr	r0, [pc, #128]	@ (8000440 <main+0xb0>)
 80003c0:	f000 ff9a 	bl	80012f8 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CAN_TX(0x001);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ff53 	bl	8000270 <CAN_TX>
      printf("Receiver\r\n");
 80003ca:	481e      	ldr	r0, [pc, #120]	@ (8000444 <main+0xb4>)
 80003cc:	f003 fbe2 	bl	8003b94 <puts>
      printf("%d\r\n", use_data[0]);
 80003d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000448 <main+0xb8>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	481d      	ldr	r0, [pc, #116]	@ (800044c <main+0xbc>)
 80003d8:	f003 fb74 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[1]);
 80003dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000448 <main+0xb8>)
 80003de:	785b      	ldrb	r3, [r3, #1]
 80003e0:	4619      	mov	r1, r3
 80003e2:	481a      	ldr	r0, [pc, #104]	@ (800044c <main+0xbc>)
 80003e4:	f003 fb6e 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[2]);
 80003e8:	4b17      	ldr	r3, [pc, #92]	@ (8000448 <main+0xb8>)
 80003ea:	789b      	ldrb	r3, [r3, #2]
 80003ec:	4619      	mov	r1, r3
 80003ee:	4817      	ldr	r0, [pc, #92]	@ (800044c <main+0xbc>)
 80003f0:	f003 fb68 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[3]);
 80003f4:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <main+0xb8>)
 80003f6:	78db      	ldrb	r3, [r3, #3]
 80003f8:	4619      	mov	r1, r3
 80003fa:	4814      	ldr	r0, [pc, #80]	@ (800044c <main+0xbc>)
 80003fc:	f003 fb62 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[4]);
 8000400:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <main+0xb8>)
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	4619      	mov	r1, r3
 8000406:	4811      	ldr	r0, [pc, #68]	@ (800044c <main+0xbc>)
 8000408:	f003 fb5c 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[5]);
 800040c:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <main+0xb8>)
 800040e:	795b      	ldrb	r3, [r3, #5]
 8000410:	4619      	mov	r1, r3
 8000412:	480e      	ldr	r0, [pc, #56]	@ (800044c <main+0xbc>)
 8000414:	f003 fb56 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[6]);
 8000418:	4b0b      	ldr	r3, [pc, #44]	@ (8000448 <main+0xb8>)
 800041a:	799b      	ldrb	r3, [r3, #6]
 800041c:	4619      	mov	r1, r3
 800041e:	480b      	ldr	r0, [pc, #44]	@ (800044c <main+0xbc>)
 8000420:	f003 fb50 	bl	8003ac4 <iprintf>
      printf("%d\r\n", use_data[7]);
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <main+0xb8>)
 8000426:	79db      	ldrb	r3, [r3, #7]
 8000428:	4619      	mov	r1, r3
 800042a:	4808      	ldr	r0, [pc, #32]	@ (800044c <main+0xbc>)
 800042c:	f003 fb4a 	bl	8003ac4 <iprintf>
      HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	@ 0x64
 8000432:	f000 fb0d 	bl	8000a50 <HAL_Delay>
	  CAN_TX(0x001);
 8000436:	bf00      	nop
 8000438:	e7c4      	b.n	80003c4 <main+0x34>
 800043a:	bf00      	nop
 800043c:	20000018 	.word	0x20000018
 8000440:	20000084 	.word	0x20000084
 8000444:	080049f8 	.word	0x080049f8
 8000448:	20000134 	.word	0x20000134
 800044c:	08004a04 	.word	0x08004a04

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b090      	sub	sp, #64	@ 0x40
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	2228      	movs	r2, #40	@ 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f003 fd34 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000472:	2302      	movs	r3, #2
 8000474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2310      	movs	r3, #16
 800047c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800047e:	2300      	movs	r3, #0
 8000480:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fc10 	bl	8001cac <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000492:	f000 f8bf 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fc0a 	bl	8002cc8 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f8ab 	bl	8000614 <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3740      	adds	r7, #64	@ 0x40
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004ce:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004d0:	4a25      	ldr	r2, [pc, #148]	@ (8000568 <MX_CAN_Init+0xa0>)
 80004d2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80004d4:	4b23      	ldr	r3, [pc, #140]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004da:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e0:	4b20      	ldr	r3, [pc, #128]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80004e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004e8:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80004ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_CAN_Init+0x9c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000500:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <MX_CAN_Init+0x9c>)
 8000502:	2200      	movs	r2, #0
 8000504:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <MX_CAN_Init+0x9c>)
 8000508:	2200      	movs	r2, #0
 800050a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <MX_CAN_Init+0x9c>)
 800050e:	2200      	movs	r2, #0
 8000510:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <MX_CAN_Init+0x9c>)
 8000514:	2200      	movs	r2, #0
 8000516:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000518:	4812      	ldr	r0, [pc, #72]	@ (8000564 <MX_CAN_Init+0x9c>)
 800051a:	f000 fabd 	bl	8000a98 <HAL_CAN_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000524:	f000 f876 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filter;
  filter.FilterIdHigh         = 0x001 << 5;                  // フィルターID1
 8000528:	2320      	movs	r3, #32
 800052a:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow          = 0x002 << 5;                  // フィルターID2
 800052c:	2340      	movs	r3, #64	@ 0x40
 800052e:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh     = 0x003 << 5;                  // フィルターID3
 8000530:	2360      	movs	r3, #96	@ 0x60
 8000532:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow      = 0x004 << 5;    // フィルターID4
 8000534:	2380      	movs	r3, #128	@ 0x80
 8000536:	60fb      	str	r3, [r7, #12]
  filter.FilterScale          = CAN_FILTERSCALE_16BIT; // 16モード
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  filter.FilterBank           = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  filter.FilterMode           = CAN_FILTERMODE_IDLIST; // IDリストモード
 8000544:	2301      	movs	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
  filter.SlaveStartFilterBank = 14;
 8000548:	230e      	movs	r3, #14
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
  filter.FilterActivation     = ENABLE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filter);
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <MX_CAN_Init+0x9c>)
 8000556:	f000 fb9a 	bl	8000c8e <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	@ 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000084 	.word	0x20000084
 8000568:	40006400 	.word	0x40006400

0800056c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 8000572:	4a15      	ldr	r2, [pc, #84]	@ (80005c8 <MX_USART2_UART_Init+0x5c>)
 8000574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 8000578:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800057c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <MX_USART2_UART_Init+0x58>)
 80005b0:	f002 fd9c 	bl	80030ec <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ba:	f000 f82b 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000ac 	.word	0x200000ac
 80005c8:	40004400 	.word	0x40004400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_GPIO_Init+0x44>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <MX_GPIO_Init+0x44>)
 80005d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_GPIO_Init+0x44>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_GPIO_Init+0x44>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <MX_GPIO_Init+0x44>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_GPIO_Init+0x44>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <HAL_MspInit+0x44>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <HAL_MspInit+0x44>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <HAL_MspInit+0x44>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <HAL_MspInit+0x44>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_MspInit+0x44>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <HAL_CAN_MspInit+0x90>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d131      	bne.n	80006ee <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <HAL_CAN_MspInit+0x94>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <HAL_CAN_MspInit+0x94>)
 8000690:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <HAL_CAN_MspInit+0x94>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <HAL_CAN_MspInit+0x94>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <HAL_CAN_MspInit+0x94>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <HAL_CAN_MspInit+0x94>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80006cc:	2309      	movs	r3, #9
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006da:	f001 f975 	bl	80019c8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2014      	movs	r0, #20
 80006e4:	f001 f939 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f001 f952 	bl	8001992 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40006400 	.word	0x40006400
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <HAL_UART_MspInit+0x80>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d129      	bne.n	8000776 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_UART_MspInit+0x84>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000752:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000764:	2307      	movs	r3, #7
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000772:	f001 f929 	bl	80019c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	@ 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40004400 	.word	0x40004400
 8000784:	40021000 	.word	0x40021000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f917 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <CAN_RX0_IRQHandler+0x10>)
 80007ee:	f000 fda9 	bl	8001344 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000084 	.word	0x20000084

080007fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e00a      	b.n	8000824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800080e:	f3af 8000 	nop.w
 8000812:	4601      	mov	r1, r0
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf0      	blt.n	800080e <_read+0x12>
  }

  return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800085e:	605a      	str	r2, [r3, #4]
  return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_isatty>:

int _isatty(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f003 fb4a 	bl	8003f68 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20003000 	.word	0x20003000
 8000900:	00000400 	.word	0x00000400
 8000904:	20000144 	.word	0x20000144
 8000908:	20000298 	.word	0x20000298

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000968 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	@ (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f003 fb09 	bl	8003f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fd15 	bl	8000390 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000968:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000974:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 8000978:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800097c:	20000298 	.word	0x20000298

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_Init+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <HAL_Init+0x28>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 ffd5 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff fe3e 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 ffed 	bl	80019ae <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 ffb5 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000148 	.word	0x20000148

08000a38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000148 	.word	0x20000148

08000a50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e0ed      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fdd6 	bl	8000668 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000acc:	f7ff ffb4 	bl	8000a38 <HAL_GetTick>
 8000ad0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad2:	e012      	b.n	8000afa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad4:	f7ff ffb0 	bl	8000a38 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	d90b      	bls.n	8000afa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2205      	movs	r2, #5
 8000af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0c5      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0e5      	beq.n	8000ad4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0202 	bic.w	r2, r2, #2
 8000b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f7ff ff8e 	bl	8000a38 <HAL_GetTick>
 8000b1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1e:	e012      	b.n	8000b46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b20:	f7ff ff8a 	bl	8000a38 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d90b      	bls.n	8000b46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e09f      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e5      	bne.n	8000b20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7e1b      	ldrb	r3, [r3, #24]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d108      	bne.n	8000b6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e007      	b.n	8000b7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7e5b      	ldrb	r3, [r3, #25]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d108      	bne.n	8000b98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e007      	b.n	8000ba8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7e9b      	ldrb	r3, [r3, #26]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0220 	orr.w	r2, r2, #32
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e007      	b.n	8000bd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0220 	bic.w	r2, r2, #32
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7edb      	ldrb	r3, [r3, #27]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d108      	bne.n	8000bec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0210 	bic.w	r2, r2, #16
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0210 	orr.w	r2, r2, #16
 8000bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7f1b      	ldrb	r3, [r3, #28]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d108      	bne.n	8000c16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0208 	orr.w	r2, r2, #8
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e007      	b.n	8000c26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0208 	bic.w	r2, r2, #8
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7f5b      	ldrb	r3, [r3, #29]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0204 	orr.w	r2, r2, #4
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e007      	b.n	8000c50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0204 	bic.w	r2, r2, #4
 8000c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	ea42 0103 	orr.w	r1, r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b087      	sub	sp, #28
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca6:	7cfb      	ldrb	r3, [r7, #19]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d003      	beq.n	8000cb4 <HAL_CAN_ConfigFilter+0x26>
 8000cac:	7cfb      	ldrb	r3, [r7, #19]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	f040 80aa 	bne.w	8000e08 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	f003 031f 	and.w	r3, r3, #31
 8000ccc:	2201      	movs	r2, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d123      	bne.n	8000d36 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3248      	adds	r2, #72	@ 0x48
 8000d16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d2c:	6979      	ldr	r1, [r7, #20]
 8000d2e:	3348      	adds	r3, #72	@ 0x48
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
 8000d34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d122      	bne.n	8000d84 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3248      	adds	r2, #72	@ 0x48
 8000d64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d7a:	6979      	ldr	r1, [r7, #20]
 8000d7c:	3348      	adds	r3, #72	@ 0x48
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d9e:	e007      	b.n	8000db0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d107      	bne.n	8000df4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000dfa:	f023 0201 	bic.w	r2, r3, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e006      	b.n	8000e16 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
  }
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d12e      	bne.n	8000e94 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e4e:	f7ff fdf3 	bl	8000a38 <HAL_GetTick>
 8000e52:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e54:	e012      	b.n	8000e7c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e56:	f7ff fdef 	bl	8000a38 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b0a      	cmp	r3, #10
 8000e62:	d90b      	bls.n	8000e7c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2205      	movs	r2, #5
 8000e74:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e012      	b.n	8000ea2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1e5      	bne.n	8000e56 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e006      	b.n	8000ea2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
  }
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b089      	sub	sp, #36	@ 0x24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <HAL_CAN_AddTxMessage+0x2c>
 8000ece:	7ffb      	ldrb	r3, [r7, #31]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	f040 80ad 	bne.w	8001030 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10a      	bne.n	8000ef6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 8095 	beq.w	8001020 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	0e1b      	lsrs	r3, r3, #24
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f00:	2201      	movs	r2, #1
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	409a      	lsls	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	6809      	ldr	r1, [r1, #0]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3318      	adds	r3, #24
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	440b      	add	r3, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e00f      	b.n	8000f4e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3318      	adds	r3, #24
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	440b      	add	r3, r1
 8000f4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3304      	adds	r3, #4
 8000f60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	7d1b      	ldrb	r3, [r3, #20]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d111      	bne.n	8000f8e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	6811      	ldr	r1, [r2, #0]
 8000f7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3318      	adds	r3, #24
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	440b      	add	r3, r1
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3307      	adds	r3, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	061a      	lsls	r2, r3, #24
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3306      	adds	r3, #6
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3305      	adds	r3, #5
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	3204      	adds	r2, #4
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	6811      	ldr	r1, [r2, #0]
 8000fb6:	ea43 0200 	orr.w	r2, r3, r0
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000fc4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3303      	adds	r3, #3
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	061a      	lsls	r2, r3, #24
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	6811      	ldr	r1, [r2, #0]
 8000fec:	ea43 0200 	orr.w	r2, r3, r0
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000ffa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3318      	adds	r3, #24
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	6811      	ldr	r1, [r2, #0]
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3318      	adds	r3, #24
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	440b      	add	r3, r1
 800101a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	e00e      	b.n	800103e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e006      	b.n	800103e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
  }
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800105c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001064:	7afb      	ldrb	r3, [r7, #11]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d11d      	bne.n	80010a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <HAL_CAN_GetRxMessage+0x24>
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	f040 8103 	bne.w	80012de <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10e      	bne.n	80010fc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d116      	bne.n	800111a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0f7      	b.n	80012ec <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d107      	bne.n	800111a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0e8      	b.n	80012ec <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	331b      	adds	r3, #27
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0204 	and.w	r2, r3, #4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	331b      	adds	r3, #27
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0d5b      	lsrs	r3, r3, #21
 8001148:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e00b      	b.n	800116a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	331b      	adds	r3, #27
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	331b      	adds	r3, #27
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0202 	and.w	r2, r3, #2
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	331b      	adds	r3, #27
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	3304      	adds	r3, #4
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2208      	movs	r2, #8
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	e00b      	b.n	80011b8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	331b      	adds	r3, #27
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 020f 	and.w	r2, r3, #15
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	331b      	adds	r3, #27
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0a1a      	lsrs	r2, r3, #8
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0c1a      	lsrs	r2, r3, #16
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3302      	adds	r3, #2
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0e1a      	lsrs	r2, r3, #24
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3303      	adds	r3, #3
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0a1a      	lsrs	r2, r3, #8
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3305      	adds	r3, #5
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0c1a      	lsrs	r2, r3, #16
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3306      	adds	r3, #6
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0e1a      	lsrs	r2, r3, #24
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3307      	adds	r3, #7
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	e007      	b.n	80012da <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0220 	orr.w	r2, r2, #32
 80012d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e006      	b.n	80012ec <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d002      	beq.n	8001316 <HAL_CAN_ActivateNotification+0x1e>
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d109      	bne.n	800132a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6959      	ldr	r1, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e006      	b.n	8001338 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
  }
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d07c      	beq.n	8001484 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d023      	beq.n	80013dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f983 	bl	80016b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80013ac:	e016      	b.n	80013dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c0:	e00c      	b.n	80013dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d4:	e002      	b.n	80013dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f989 	bl	80016ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f963 	bl	80016c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001400:	e016      	b.n	8001430 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
 8001414:	e00c      	b.n	8001430 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	e002      	b.n	8001430 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f969 	bl	8001702 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d024      	beq.n	8001484 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001442:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f943 	bl	80016da <HAL_CAN_TxMailbox2CompleteCallback>
 8001454:	e016      	b.n	8001484 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
 8001468:	e00c      	b.n	8001484 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	e002      	b.n	8001484 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f949 	bl	8001716 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00c      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2210      	movs	r2, #16
 80014a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2208      	movs	r2, #8
 80014c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f930 	bl	800172a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7fe ff0e 	bl	8000304 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2210      	movs	r2, #16
 800150a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2208      	movs	r2, #8
 8001526:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f912 	bl	8001752 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f8f9 	bl	800173e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2210      	movs	r2, #16
 8001566:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8fc 	bl	8001766 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2208      	movs	r2, #8
 8001588:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8f5 	bl	800177a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d07b      	beq.n	8001692 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d072      	beq.n	800168a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d043      	beq.n	800168a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03e      	beq.n	800168a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001612:	2b60      	cmp	r3, #96	@ 0x60
 8001614:	d02b      	beq.n	800166e <HAL_CAN_IRQHandler+0x32a>
 8001616:	2b60      	cmp	r3, #96	@ 0x60
 8001618:	d82e      	bhi.n	8001678 <HAL_CAN_IRQHandler+0x334>
 800161a:	2b50      	cmp	r3, #80	@ 0x50
 800161c:	d022      	beq.n	8001664 <HAL_CAN_IRQHandler+0x320>
 800161e:	2b50      	cmp	r3, #80	@ 0x50
 8001620:	d82a      	bhi.n	8001678 <HAL_CAN_IRQHandler+0x334>
 8001622:	2b40      	cmp	r3, #64	@ 0x40
 8001624:	d019      	beq.n	800165a <HAL_CAN_IRQHandler+0x316>
 8001626:	2b40      	cmp	r3, #64	@ 0x40
 8001628:	d826      	bhi.n	8001678 <HAL_CAN_IRQHandler+0x334>
 800162a:	2b30      	cmp	r3, #48	@ 0x30
 800162c:	d010      	beq.n	8001650 <HAL_CAN_IRQHandler+0x30c>
 800162e:	2b30      	cmp	r3, #48	@ 0x30
 8001630:	d822      	bhi.n	8001678 <HAL_CAN_IRQHandler+0x334>
 8001632:	2b10      	cmp	r3, #16
 8001634:	d002      	beq.n	800163c <HAL_CAN_IRQHandler+0x2f8>
 8001636:	2b20      	cmp	r3, #32
 8001638:	d005      	beq.n	8001646 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800163a:	e01d      	b.n	8001678 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001644:	e019      	b.n	800167a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800164e:	e014      	b.n	800167a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	f043 0320 	orr.w	r3, r3, #32
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001658:	e00f      	b.n	800167a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001662:	e00a      	b.n	800167a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800166c:	e005      	b.n	800167a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001676:	e000      	b.n	800167a <HAL_CAN_IRQHandler+0x336>
            break;
 8001678:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001688:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2204      	movs	r2, #4
 8001690:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f872 	bl	800178e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	@ (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	@ (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	@ (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	e14e      	b.n	8001c76 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8140 	beq.w	8001c70 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d005      	beq.n	8001a08 <HAL_GPIO_Init+0x40>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d130      	bne.n	8001a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 0201 	and.w	r2, r3, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d017      	beq.n	8001aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d123      	bne.n	8001afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	6939      	ldr	r1, [r7, #16]
 8001af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0203 	and.w	r2, r3, #3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 809a 	beq.w	8001c70 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3c:	4b55      	ldr	r3, [pc, #340]	@ (8001c94 <HAL_GPIO_Init+0x2cc>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a54      	ldr	r2, [pc, #336]	@ (8001c94 <HAL_GPIO_Init+0x2cc>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_GPIO_Init+0x2cc>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b7e:	d013      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a46      	ldr	r2, [pc, #280]	@ (8001c9c <HAL_GPIO_Init+0x2d4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1dc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a45      	ldr	r2, [pc, #276]	@ (8001ca0 <HAL_GPIO_Init+0x2d8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1d8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a44      	ldr	r2, [pc, #272]	@ (8001ca4 <HAL_GPIO_Init+0x2dc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1d4>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1e2>
 8001b9c:	2305      	movs	r3, #5
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1e2>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1e2>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1e2>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bba:	4937      	ldr	r1, [pc, #220]	@ (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc8:	4b37      	ldr	r3, [pc, #220]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c16:	4a24      	ldr	r2, [pc, #144]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f aea9 	bne.w	80019d8 <HAL_GPIO_Init+0x10>
  }
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	48000c00 	.word	0x48000c00
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f000 bff4 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 816d 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ce8:	4bb4      	ldr	r3, [pc, #720]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf4:	4bb1      	ldr	r3, [pc, #708]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d157      	bne.n	8001db0 <HAL_RCC_OscConfig+0x104>
 8001d00:	4bae      	ldr	r3, [pc, #696]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0c:	d150      	bne.n	8001db0 <HAL_RCC_OscConfig+0x104>
 8001d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d12:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d2e:	d802      	bhi.n	8001d36 <HAL_RCC_OscConfig+0x8a>
 8001d30:	4ba2      	ldr	r3, [pc, #648]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0xb6>
 8001d36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d5e:	4b97      	ldr	r3, [pc, #604]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d66:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d6e:	fa92 f2a2 	rbit	r2, r2
 8001d72:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d7a:	fab2 f282 	clz	r2, r2
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	f042 0220 	orr.w	r2, r2, #32
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	f002 021f 	and.w	r2, r2, #31
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8114 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x314>
 8001d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 810b 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 bf85 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x124>
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e036      	b.n	8001e3e <HAL_RCC_OscConfig+0x192>
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x14e>
 8001de0:	4b76      	ldr	r3, [pc, #472]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a75      	ldr	r2, [pc, #468]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a72      	ldr	r2, [pc, #456]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e021      	b.n	8001e3e <HAL_RCC_OscConfig+0x192>
 8001dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x17a>
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b68      	ldr	r3, [pc, #416]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a67      	ldr	r2, [pc, #412]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x192>
 8001e26:	4b65      	ldr	r3, [pc, #404]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a64      	ldr	r2, [pc, #400]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b62      	ldr	r3, [pc, #392]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a61      	ldr	r2, [pc, #388]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	f023 020f 	bic.w	r2, r3, #15
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	495a      	ldr	r1, [pc, #360]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d054      	beq.n	8001f12 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe fde6 	bl	8000a38 <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e72:	f7fe fde1 	bl	8000a38 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	@ 0x64
 8001e80:	d902      	bls.n	8001e88 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f000 bf19 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
 8001e88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_RCC_OscConfig+0x204>
 8001eaa:	4b44      	ldr	r3, [pc, #272]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e015      	b.n	8001edc <HAL_RCC_OscConfig+0x230>
 8001eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ecc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ed8:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ee4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ee8:	fa92 f2a2 	rbit	r2, r2
 8001eec:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ef0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0b0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1c6>
 8001f10:	e057      	b.n	8001fc2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fd91 	bl	8000a38 <HAL_GetTick>
 8001f16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fd8c 	bl	8000a38 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	@ 0x64
 8001f2a:	d902      	bls.n	8001f32 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f000 bec4 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
 8001f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f36:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f52:	d802      	bhi.n	8001f5a <HAL_RCC_OscConfig+0x2ae>
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x2da>
 8001f5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f5e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f72:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_RCC_OscConfig+0x310>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f8a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f92:	fa92 f2a2 	rbit	r2, r2
 8001f96:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f042 0220 	orr.w	r2, r2, #32
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1b0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x270>
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_OscConfig+0x316>
 8001fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 816c 	beq.w	80022b0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd8:	4bcc      	ldr	r3, [pc, #816]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe4:	4bc9      	ldr	r3, [pc, #804]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d16d      	bne.n	80020cc <HAL_RCC_OscConfig+0x420>
 8001ff0:	4bc6      	ldr	r3, [pc, #792]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d167      	bne.n	80020cc <HAL_RCC_OscConfig+0x420>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800200e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b3f      	cmp	r3, #63	@ 0x3f
 800201a:	d802      	bhi.n	8002022 <HAL_RCC_OscConfig+0x376>
 800201c:	4bbb      	ldr	r3, [pc, #748]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e013      	b.n	800204a <HAL_RCC_OscConfig+0x39e>
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002034:	2302      	movs	r3, #2
 8002036:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800203a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002046:	4bb1      	ldr	r3, [pc, #708]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	2202      	movs	r2, #2
 800204c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002050:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002054:	fa92 f2a2 	rbit	r2, r2
 8002058:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800205c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f042 0220 	orr.w	r2, r2, #32
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f002 021f 	and.w	r2, r2, #31
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCC_OscConfig+0x3e6>
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d002      	beq.n	8002092 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	f000 be14 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002092:	4b9e      	ldr	r3, [pc, #632]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	21f8      	movs	r1, #248	@ 0xf8
 80020a8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020b0:	fa91 f1a1 	rbit	r1, r1
 80020b4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80020b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80020bc:	fab1 f181 	clz	r1, r1
 80020c0:	b2c9      	uxtb	r1, r1
 80020c2:	408b      	lsls	r3, r1
 80020c4:	4991      	ldr	r1, [pc, #580]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e0f1      	b.n	80022b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8083 	beq.w	80021e4 <HAL_RCC_OscConfig+0x538>
 80020de:	2301      	movs	r3, #1
 80020e0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	461a      	mov	r2, r3
 8002106:	2301      	movs	r3, #1
 8002108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fc95 	bl	8000a38 <HAL_GetTick>
 800210e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe fc90 	bl	8000a38 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d902      	bls.n	800212a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	f000 bdc8 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800213c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b3f      	cmp	r3, #63	@ 0x3f
 8002148:	d802      	bhi.n	8002150 <HAL_RCC_OscConfig+0x4a4>
 800214a:	4b70      	ldr	r3, [pc, #448]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e013      	b.n	8002178 <HAL_RCC_OscConfig+0x4cc>
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002168:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002174:	4b65      	ldr	r3, [pc, #404]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	2202      	movs	r2, #2
 800217a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800217e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800218a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0b4      	beq.n	8002114 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b58      	ldr	r3, [pc, #352]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	21f8      	movs	r1, #248	@ 0xf8
 80021c0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021c8:	fa91 f1a1 	rbit	r1, r1
 80021cc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021d4:	fab1 f181 	clz	r1, r1
 80021d8:	b2c9      	uxtb	r1, r1
 80021da:	408b      	lsls	r3, r1
 80021dc:	494b      	ldr	r1, [pc, #300]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
 80021e2:	e065      	b.n	80022b0 <HAL_RCC_OscConfig+0x604>
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80021f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fc12 	bl	8000a38 <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fc0d 	bl	8000a38 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	f000 bd45 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b3f      	cmp	r3, #63	@ 0x3f
 800224e:	d802      	bhi.n	8002256 <HAL_RCC_OscConfig+0x5aa>
 8002250:	4b2e      	ldr	r3, [pc, #184]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	e013      	b.n	800227e <HAL_RCC_OscConfig+0x5d2>
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800226e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800227a:	4b24      	ldr	r3, [pc, #144]	@ (800230c <HAL_RCC_OscConfig+0x660>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	2202      	movs	r2, #2
 8002280:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002284:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002290:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f002 021f 	and.w	r2, r2, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f202 	lsl.w	r2, r1, r2
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1b4      	bne.n	800221a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8115 	beq.w	80024f0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07e      	beq.n	80023d4 <HAL_RCC_OscConfig+0x728>
 80022d6:	2301      	movs	r3, #1
 80022d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80022e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x664>)
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7fe fb9a 	bl	8000a38 <HAL_GetTick>
 8002304:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002308:	e00f      	b.n	800232a <HAL_RCC_OscConfig+0x67e>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe fb90 	bl	8000a38 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d902      	bls.n	800232a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	f000 bcc8 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002344:	2202      	movs	r2, #2
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002382:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002384:	4bb0      	ldr	r3, [pc, #704]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 8002386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002390:	2102      	movs	r1, #2
 8002392:	6019      	str	r1, [r3, #0]
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f1a3 	rbit	r1, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023aa:	6019      	str	r1, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0a0      	beq.n	8002314 <HAL_RCC_OscConfig+0x668>
 80023d2:	e08d      	b.n	80024f0 <HAL_RCC_OscConfig+0x844>
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023f6:	601a      	str	r2, [r3, #0]
  return result;
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002400:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4b90      	ldr	r3, [pc, #576]	@ (800264c <HAL_RCC_OscConfig+0x9a0>)
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	2300      	movs	r3, #0
 8002414:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fb0f 	bl	8000a38 <HAL_GetTick>
 800241a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fb0a 	bl	8000a38 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d902      	bls.n	8002436 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	f000 bc42 	b.w	8002cba <HAL_RCC_OscConfig+0x100e>
 8002436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002462:	2202      	movs	r2, #2
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002486:	2202      	movs	r2, #2
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a2:	4b69      	ldr	r3, [pc, #420]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80024a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024ae:	2102      	movs	r1, #2
 80024b0:	6019      	str	r1, [r3, #0]
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f1a3 	rbit	r1, r3
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024c8:	6019      	str	r1, [r3, #0]
  return result;
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d197      	bne.n	8002420 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 819e 	beq.w	8002842 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250c:	4b4e      	ldr	r3, [pc, #312]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d116      	bne.n	8002546 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b4b      	ldr	r3, [pc, #300]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4a4a      	ldr	r2, [pc, #296]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002522:	61d3      	str	r3, [r2, #28]
 8002524:	4b48      	ldr	r3, [pc, #288]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800253e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b42      	ldr	r3, [pc, #264]	@ (8002650 <HAL_RCC_OscConfig+0x9a4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11a      	bne.n	8002588 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b3f      	ldr	r3, [pc, #252]	@ (8002650 <HAL_RCC_OscConfig+0x9a4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3e      	ldr	r2, [pc, #248]	@ (8002650 <HAL_RCC_OscConfig+0x9a4>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe fa6b 	bl	8000a38 <HAL_GetTick>
 8002562:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002566:	e009      	b.n	800257c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fa66 	bl	8000a38 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	@ 0x64
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e39e      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <HAL_RCC_OscConfig+0x9a4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x8fa>
 8002598:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a2a      	ldr	r2, [pc, #168]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6213      	str	r3, [r2, #32]
 80025a4:	e035      	b.n	8002612 <HAL_RCC_OscConfig+0x966>
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x924>
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a20      	ldr	r2, [pc, #128]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	e020      	b.n	8002612 <HAL_RCC_OscConfig+0x966>
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x94e>
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a18      	ldr	r2, [pc, #96]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6213      	str	r3, [r2, #32]
 80025ec:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a15      	ldr	r2, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6213      	str	r3, [r2, #32]
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x966>
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6213      	str	r3, [r2, #32]
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4a0f      	ldr	r2, [pc, #60]	@ (8002648 <HAL_RCC_OscConfig+0x99c>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7fe fa08 	bl	8000a38 <HAL_GetTick>
 8002628:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	e012      	b.n	8002654 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fa03 	bl	8000a38 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d908      	bls.n	8002654 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e339      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	10908120 	.word	0x10908120
 8002650:	40007000 	.word	0x40007000
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800265c:	2202      	movs	r2, #2
 800265e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002680:	2202      	movs	r2, #2
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800269a:	601a      	str	r2, [r3, #0]
  return result;
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_RCC_OscConfig+0xa10>
 80026b6:	4b98      	ldr	r3, [pc, #608]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0xa38>
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026ec:	2102      	movs	r1, #2
 80026ee:	6011      	str	r1, [r2, #0]
 80026f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	fa92 f1a2 	rbit	r1, r2
 80026fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002702:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002706:	6011      	str	r1, [r2, #0]
  return result;
 8002708:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800270c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f002 021f 	and.w	r2, r2, #31
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	f43f af7f 	beq.w	800262e <HAL_RCC_OscConfig+0x982>
 8002730:	e07d      	b.n	800282e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe f981 	bl	8000a38 <HAL_GetTick>
 8002736:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7fe f97c 	bl	8000a38 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e2b2      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800275c:	2202      	movs	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002780:	2202      	movs	r2, #2
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fa93 f2a3 	rbit	r2, r3
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800279a:	601a      	str	r2, [r3, #0]
  return result;
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_OscConfig+0xb10>
 80027b6:	4b58      	ldr	r3, [pc, #352]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0xb38>
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027c4:	2202      	movs	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027ec:	2102      	movs	r1, #2
 80027ee:	6011      	str	r1, [r2, #0]
 80027f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	fa92 f1a2 	rbit	r1, r2
 80027fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002802:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002806:	6011      	str	r1, [r2, #0]
  return result;
 8002808:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d186      	bne.n	800273c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800282e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a37      	ldr	r2, [pc, #220]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8232 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	f000 8201 	beq.w	8002c64 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b02      	cmp	r3, #2
 8002870:	f040 8157 	bne.w	8002b22 <HAL_RCC_OscConfig+0xe76>
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800287c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002898:	601a      	str	r2, [r3, #0]
  return result;
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	461a      	mov	r2, r3
 80028b6:	2300      	movs	r3, #0
 80028b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe f8bd 	bl	8000a38 <HAL_GetTick>
 80028be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	e009      	b.n	80028d8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe f8b8 	bl	8000a38 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1f0      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028fc:	601a      	str	r2, [r3, #0]
  return result;
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002906:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002910:	d804      	bhi.n	800291c <HAL_RCC_OscConfig+0xc70>
 8002912:	4b01      	ldr	r3, [pc, #4]	@ (8002918 <HAL_RCC_OscConfig+0xc6c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e029      	b.n	800296c <HAL_RCC_OscConfig+0xcc0>
 8002918:	40021000 	.word	0x40021000
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002924:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800294a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4bc3      	ldr	r3, [pc, #780]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002970:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002974:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002978:	6011      	str	r1, [r2, #0]
 800297a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	fa92 f1a2 	rbit	r1, r2
 8002988:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002990:	6011      	str	r1, [r2, #0]
  return result;
 8002992:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002996:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f042 0220 	orr.w	r2, r2, #32
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f002 021f 	and.w	r2, r2, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d185      	bne.n	80028c4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b8:	4baf      	ldr	r3, [pc, #700]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	430b      	orrs	r3, r1
 80029da:	49a7      	ldr	r1, [pc, #668]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a04:	601a      	str	r2, [r3, #0]
  return result;
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a0e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a1a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	2301      	movs	r3, #1
 8002a24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe f807 	bl	8000a38 <HAL_GetTick>
 8002a2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2e:	e009      	b.n	8002a44 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe f802 	bl	8000a38 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e13a      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a68:	601a      	str	r2, [r3, #0]
  return result;
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a7c:	d802      	bhi.n	8002a84 <HAL_RCC_OscConfig+0xdd8>
 8002a7e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	e027      	b.n	8002ad4 <HAL_RCC_OscConfig+0xe28>
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	fa93 f2a3 	rbit	r2, r3
 8002aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ab2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f2a3 	rbit	r2, r3
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ad8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002adc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ae0:	6011      	str	r1, [r2, #0]
 8002ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	fa92 f1a2 	rbit	r1, r2
 8002af0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002af8:	6011      	str	r1, [r2, #0]
  return result;
 8002afa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002afe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f002 021f 	and.w	r2, r2, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d087      	beq.n	8002a30 <HAL_RCC_OscConfig+0xd84>
 8002b20:	e0ca      	b.n	8002cb8 <HAL_RCC_OscConfig+0x100c>
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b46:	601a      	str	r2, [r3, #0]
  return result;
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	461a      	mov	r2, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fd ff66 	bl	8000a38 <HAL_GetTick>
 8002b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fd ff61 	bl	8000a38 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e099      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
 8002b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002baa:	601a      	str	r2, [r3, #0]
  return result;
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bbe:	d802      	bhi.n	8002bc6 <HAL_RCC_OscConfig+0xf1a>
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e027      	b.n	8002c16 <HAL_RCC_OscConfig+0xf6a>
 8002bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_RCC_OscConfig+0xfcc>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c1a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c1e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c22:	6011      	str	r1, [r2, #0]
 8002c24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c28:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	fa92 f1a2 	rbit	r1, r2
 8002c32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c3a:	6011      	str	r1, [r2, #0]
  return result;
 8002c3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c40:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d187      	bne.n	8002b72 <HAL_RCC_OscConfig+0xec6>
 8002c62:	e029      	b.n	8002cb8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d103      	bne.n	8002c7c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e020      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
 8002c78:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_OscConfig+0x1018>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ca0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09e      	sub	sp, #120	@ 0x78
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e154      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b89      	ldr	r3, [pc, #548]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b86      	ldr	r3, [pc, #536]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	4984      	ldr	r1, [pc, #528]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b82      	ldr	r3, [pc, #520]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e13c      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4978      	ldr	r1, [pc, #480]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80cd 	beq.w	8002ed6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d137      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xec>
 8002d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d5c:	d802      	bhi.n	8002d64 <HAL_RCC_ClockConfig+0x9c>
 8002d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e00f      	b.n	8002d84 <HAL_RCC_ClockConfig+0xbc>
 8002d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d76:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d80:	4b62      	ldr	r3, [pc, #392]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f002 021f 	and.w	r2, r2, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d171      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ea      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d137      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x164>
 8002dbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd4:	d802      	bhi.n	8002ddc <HAL_RCC_ClockConfig+0x114>
 8002dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_ClockConfig+0x134>
 8002ddc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df8:	4b44      	ldr	r3, [pc, #272]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e00:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e04:	fa92 f2a2 	rbit	r2, r2
 8002e08:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f002 021f 	and.w	r2, r2, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d135      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ae      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e42:	d802      	bhi.n	8002e4a <HAL_RCC_ClockConfig+0x182>
 8002e44:	4b31      	ldr	r3, [pc, #196]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	e00d      	b.n	8002e66 <HAL_RCC_ClockConfig+0x19e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	2302      	movs	r3, #2
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	2202      	movs	r2, #2
 8002e68:	61ba      	str	r2, [r7, #24]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	617a      	str	r2, [r7, #20]
  return result;
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e07a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e94:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 0203 	bic.w	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	491a      	ldr	r1, [pc, #104]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea6:	f7fd fdc7 	bl	8000a38 <HAL_GetTick>
 8002eaa:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f7fd fdc3 	bl	8000a38 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e062      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 020c 	and.w	r2, r3, #12
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d1eb      	bne.n	8002eae <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d215      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0207 	bic.w	r2, r3, #7
 8002eec:	4906      	ldr	r1, [pc, #24]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <HAL_RCC_ClockConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d006      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e041      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2c2>
 8002f06:	bf00      	nop
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_RCC_ClockConfig+0x2cc>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	491a      	ldr	r1, [pc, #104]	@ (8002f94 <HAL_RCC_ClockConfig+0x2cc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <HAL_RCC_ClockConfig+0x2cc>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4912      	ldr	r1, [pc, #72]	@ (8002f94 <HAL_RCC_ClockConfig+0x2cc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f4e:	f000 f829 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f52:	4601      	mov	r1, r0
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_RCC_ClockConfig+0x2cc>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f5c:	22f0      	movs	r2, #240	@ 0xf0
 8002f5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	fa92 f2a2 	rbit	r2, r2
 8002f66:	60fa      	str	r2, [r7, #12]
  return result;
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	40d3      	lsrs	r3, r2
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <HAL_RCC_ClockConfig+0x2d0>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7a:	4a08      	ldr	r2, [pc, #32]	@ (8002f9c <HAL_RCC_ClockConfig+0x2d4>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_RCC_ClockConfig+0x2d8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fd14 	bl	80009b0 <HAL_InitTick>
  
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3778      	adds	r7, #120	@ 0x78
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08004a0c 	.word	0x08004a0c
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x36>
 8002fd2:	e026      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd6:	613b      	str	r3, [r7, #16]
      break;
 8002fd8:	e026      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	4a17      	ldr	r2, [pc, #92]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003000:	4a0e      	ldr	r2, [pc, #56]	@ (800303c <HAL_RCC_GetSysClockFreq+0x98>)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fbb2 f2f3 	udiv	r2, r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e004      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0c      	ldr	r2, [pc, #48]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
      break;
 8003020:	e002      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetSysClockFreq+0x98>)
 8003024:	613b      	str	r3, [r7, #16]
      break;
 8003026:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003028:	693b      	ldr	r3, [r7, #16]
}
 800302a:	4618      	mov	r0, r3
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	007a1200 	.word	0x007a1200
 8003040:	08004a24 	.word	0x08004a24
 8003044:	08004a34 	.word	0x08004a34
 8003048:	003d0900 	.word	0x003d0900

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	@ (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800306a:	f7ff ffef 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306e:	4601      	mov	r1, r0
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003078:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800307c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	fa92 f2a2 	rbit	r2, r2
 8003084:	603a      	str	r2, [r7, #0]
  return result;
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	40d3      	lsrs	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08004a1c 	.word	0x08004a1c

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030ae:	f7ff ffcd 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80030b2:	4601      	mov	r1, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030bc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	fa92 f2a2 	rbit	r2, r2
 80030c8:	603a      	str	r2, [r7, #0]
  return result;
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	fab2 f282 	clz	r2, r2
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	40d3      	lsrs	r3, r2
 80030d4:	4a04      	ldr	r2, [pc, #16]	@ (80030e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08004a1c 	.word	0x08004a1c

080030ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e040      	b.n	8003180 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd faf6 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	@ 0x24
 8003118:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9e8 	bl	8003508 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8af 	bl	800329c <UART_SetConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01b      	b.n	8003180 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa67 	bl	800364c <UART_CheckIdleState>
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	@ 0x28
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800319c:	2b20      	cmp	r3, #32
 800319e:	d177      	bne.n	8003290 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_UART_Transmit+0x24>
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e070      	b.n	8003292 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2221      	movs	r2, #33	@ 0x21
 80031bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031be:	f7fd fc3b 	bl	8000a38 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031dc:	d108      	bne.n	80031f0 <HAL_UART_Transmit+0x68>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d104      	bne.n	80031f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e003      	b.n	80031f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031f8:	e02f      	b.n	800325a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	@ 0x80
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fac9 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e03b      	b.n	8003292 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322c:	b292      	uxth	r2, r2
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	3302      	adds	r3, #2
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e007      	b.n	8003248 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1c9      	bne.n	80031fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2140      	movs	r1, #64	@ 0x40
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa93 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e005      	b.n	8003292 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b8a      	ldr	r3, [pc, #552]	@ (80034f0 <UART_SetConfig+0x254>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a78      	ldr	r2, [pc, #480]	@ (80034f4 <UART_SetConfig+0x258>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d120      	bne.n	800335a <UART_SetConfig+0xbe>
 8003318:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <UART_SetConfig+0x25c>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d817      	bhi.n	8003354 <UART_SetConfig+0xb8>
 8003324:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <UART_SetConfig+0x90>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003349 	.word	0x08003349
 8003334:	0800334f 	.word	0x0800334f
 8003338:	08003343 	.word	0x08003343
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e01d      	b.n	800337e <UART_SetConfig+0xe2>
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e01a      	b.n	800337e <UART_SetConfig+0xe2>
 8003348:	2304      	movs	r3, #4
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e017      	b.n	800337e <UART_SetConfig+0xe2>
 800334e:	2308      	movs	r3, #8
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e014      	b.n	800337e <UART_SetConfig+0xe2>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e011      	b.n	800337e <UART_SetConfig+0xe2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a67      	ldr	r2, [pc, #412]	@ (80034fc <UART_SetConfig+0x260>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d102      	bne.n	800336a <UART_SetConfig+0xce>
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e009      	b.n	800337e <UART_SetConfig+0xe2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a64      	ldr	r2, [pc, #400]	@ (8003500 <UART_SetConfig+0x264>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d102      	bne.n	800337a <UART_SetConfig+0xde>
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e001      	b.n	800337e <UART_SetConfig+0xe2>
 800337a:	2310      	movs	r3, #16
 800337c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003386:	d15a      	bne.n	800343e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	2b08      	cmp	r3, #8
 800338c:	d827      	bhi.n	80033de <UART_SetConfig+0x142>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <UART_SetConfig+0xf8>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033df 	.word	0x080033df
 80033a4:	080033cf 	.word	0x080033cf
 80033a8:	080033df 	.word	0x080033df
 80033ac:	080033df 	.word	0x080033df
 80033b0:	080033df 	.word	0x080033df
 80033b4:	080033d7 	.word	0x080033d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7ff fe54 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 80033bc:	61b8      	str	r0, [r7, #24]
        break;
 80033be:	e013      	b.n	80033e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7ff fe72 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 80033c4:	61b8      	str	r0, [r7, #24]
        break;
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003504 <UART_SetConfig+0x268>)
 80033ca:	61bb      	str	r3, [r7, #24]
        break;
 80033cc:	e00c      	b.n	80033e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ce:	f7ff fde9 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 80033d2:	61b8      	str	r0, [r7, #24]
        break;
 80033d4:	e008      	b.n	80033e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033da:	61bb      	str	r3, [r7, #24]
        break;
 80033dc:	e004      	b.n	80033e8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	77bb      	strb	r3, [r7, #30]
        break;
 80033e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d074      	beq.n	80034d8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	005a      	lsls	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d916      	bls.n	8003438 <UART_SetConfig+0x19c>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003410:	d212      	bcs.n	8003438 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f023 030f 	bic.w	r3, r3, #15
 800341a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	b29b      	uxth	r3, r3
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	b29a      	uxth	r2, r3
 8003428:	89fb      	ldrh	r3, [r7, #14]
 800342a:	4313      	orrs	r3, r2
 800342c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	89fa      	ldrh	r2, [r7, #14]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	e04f      	b.n	80034d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	77bb      	strb	r3, [r7, #30]
 800343c:	e04c      	b.n	80034d8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d828      	bhi.n	8003496 <UART_SetConfig+0x1fa>
 8003444:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <UART_SetConfig+0x1b0>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	08003471 	.word	0x08003471
 8003450:	08003479 	.word	0x08003479
 8003454:	08003481 	.word	0x08003481
 8003458:	08003497 	.word	0x08003497
 800345c:	08003487 	.word	0x08003487
 8003460:	08003497 	.word	0x08003497
 8003464:	08003497 	.word	0x08003497
 8003468:	08003497 	.word	0x08003497
 800346c:	0800348f 	.word	0x0800348f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003470:	f7ff fdf8 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8003474:	61b8      	str	r0, [r7, #24]
        break;
 8003476:	e013      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003478:	f7ff fe16 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 800347c:	61b8      	str	r0, [r7, #24]
        break;
 800347e:	e00f      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003480:	4b20      	ldr	r3, [pc, #128]	@ (8003504 <UART_SetConfig+0x268>)
 8003482:	61bb      	str	r3, [r7, #24]
        break;
 8003484:	e00c      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003486:	f7ff fd8d 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 800348a:	61b8      	str	r0, [r7, #24]
        break;
 800348c:	e008      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800348e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003492:	61bb      	str	r3, [r7, #24]
        break;
 8003494:	e004      	b.n	80034a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	77bb      	strb	r3, [r7, #30]
        break;
 800349e:	bf00      	nop
    }

    if (pclk != 0U)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d018      	beq.n	80034d8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085a      	lsrs	r2, r3, #1
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	441a      	add	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d909      	bls.n	80034d4 <UART_SetConfig+0x238>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c6:	d205      	bcs.n	80034d4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	e001      	b.n	80034d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	efff69f3 	.word	0xefff69f3
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40004400 	.word	0x40004400
 8003500:	40004800 	.word	0x40004800
 8003504:	007a1200 	.word	0x007a1200

08003508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01a      	beq.n	800361e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003606:	d10a      	bne.n	800361e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b098      	sub	sp, #96	@ 0x60
 8003650:	af02      	add	r7, sp, #8
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800365c:	f7fd f9ec 	bl	8000a38 <HAL_GetTick>
 8003660:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b08      	cmp	r3, #8
 800366e:	d12e      	bne.n	80036ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f88c 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800369e:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e6      	bne.n	800368a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e062      	b.n	8003794 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d149      	bne.n	8003770 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f856 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03c      	beq.n	8003770 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	623b      	str	r3, [r7, #32]
   return(result);
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800370a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
 8003716:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800371a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	60fb      	str	r3, [r7, #12]
   return(result);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3308      	adds	r3, #8
 8003746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003748:	61fa      	str	r2, [r7, #28]
 800374a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	617b      	str	r3, [r7, #20]
   return(result);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e5      	bne.n	8003728 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e011      	b.n	8003794 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3758      	adds	r7, #88	@ 0x58
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ac:	e04f      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d04b      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fd f93f 	bl	8000a38 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <UART_WaitOnFlagUntilTimeout+0x30>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e04e      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d037      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b80      	cmp	r3, #128	@ 0x80
 80037e2:	d034      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b40      	cmp	r3, #64	@ 0x40
 80037e8:	d031      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d110      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f838 	bl	8003876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2208      	movs	r2, #8
 800380a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e029      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003828:	d111      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f81e 	bl	8003876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e00f      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d0a0      	beq.n	80037ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003876:	b480      	push	{r7}
 8003878:	b095      	sub	sp, #84	@ 0x54
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800389c:	643b      	str	r3, [r7, #64]	@ 0x40
 800389e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e6      	bne.n	800387e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e5      	bne.n	80038b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d118      	bne.n	800391e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f023 0310 	bic.w	r3, r3, #16
 8003900:	647b      	str	r3, [r7, #68]	@ 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	613b      	str	r3, [r7, #16]
   return(result);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e6      	bne.n	80038ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003932:	bf00      	nop
 8003934:	3754      	adds	r7, #84	@ 0x54
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <std>:
 8003940:	2300      	movs	r3, #0
 8003942:	b510      	push	{r4, lr}
 8003944:	4604      	mov	r4, r0
 8003946:	e9c0 3300 	strd	r3, r3, [r0]
 800394a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394e:	6083      	str	r3, [r0, #8]
 8003950:	8181      	strh	r1, [r0, #12]
 8003952:	6643      	str	r3, [r0, #100]	@ 0x64
 8003954:	81c2      	strh	r2, [r0, #14]
 8003956:	6183      	str	r3, [r0, #24]
 8003958:	4619      	mov	r1, r3
 800395a:	2208      	movs	r2, #8
 800395c:	305c      	adds	r0, #92	@ 0x5c
 800395e:	f000 fab5 	bl	8003ecc <memset>
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <std+0x58>)
 8003964:	6263      	str	r3, [r4, #36]	@ 0x24
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <std+0x5c>)
 8003968:	62a3      	str	r3, [r4, #40]	@ 0x28
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <std+0x60>)
 800396c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <std+0x64>)
 8003970:	6323      	str	r3, [r4, #48]	@ 0x30
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <std+0x68>)
 8003974:	6224      	str	r4, [r4, #32]
 8003976:	429c      	cmp	r4, r3
 8003978:	d006      	beq.n	8003988 <std+0x48>
 800397a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800397e:	4294      	cmp	r4, r2
 8003980:	d002      	beq.n	8003988 <std+0x48>
 8003982:	33d0      	adds	r3, #208	@ 0xd0
 8003984:	429c      	cmp	r4, r3
 8003986:	d105      	bne.n	8003994 <std+0x54>
 8003988:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003990:	f000 bb14 	b.w	8003fbc <__retarget_lock_init_recursive>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	bf00      	nop
 8003998:	08003d1d 	.word	0x08003d1d
 800399c:	08003d3f 	.word	0x08003d3f
 80039a0:	08003d77 	.word	0x08003d77
 80039a4:	08003d9b 	.word	0x08003d9b
 80039a8:	2000014c 	.word	0x2000014c

080039ac <stdio_exit_handler>:
 80039ac:	4a02      	ldr	r2, [pc, #8]	@ (80039b8 <stdio_exit_handler+0xc>)
 80039ae:	4903      	ldr	r1, [pc, #12]	@ (80039bc <stdio_exit_handler+0x10>)
 80039b0:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <stdio_exit_handler+0x14>)
 80039b2:	f000 b869 	b.w	8003a88 <_fwalk_sglue>
 80039b6:	bf00      	nop
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	08004869 	.word	0x08004869
 80039c0:	2000001c 	.word	0x2000001c

080039c4 <cleanup_stdio>:
 80039c4:	6841      	ldr	r1, [r0, #4]
 80039c6:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <cleanup_stdio+0x34>)
 80039c8:	4299      	cmp	r1, r3
 80039ca:	b510      	push	{r4, lr}
 80039cc:	4604      	mov	r4, r0
 80039ce:	d001      	beq.n	80039d4 <cleanup_stdio+0x10>
 80039d0:	f000 ff4a 	bl	8004868 <_fflush_r>
 80039d4:	68a1      	ldr	r1, [r4, #8]
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <cleanup_stdio+0x38>)
 80039d8:	4299      	cmp	r1, r3
 80039da:	d002      	beq.n	80039e2 <cleanup_stdio+0x1e>
 80039dc:	4620      	mov	r0, r4
 80039de:	f000 ff43 	bl	8004868 <_fflush_r>
 80039e2:	68e1      	ldr	r1, [r4, #12]
 80039e4:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <cleanup_stdio+0x3c>)
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d004      	beq.n	80039f4 <cleanup_stdio+0x30>
 80039ea:	4620      	mov	r0, r4
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f000 bf3a 	b.w	8004868 <_fflush_r>
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	bf00      	nop
 80039f8:	2000014c 	.word	0x2000014c
 80039fc:	200001b4 	.word	0x200001b4
 8003a00:	2000021c 	.word	0x2000021c

08003a04 <global_stdio_init.part.0>:
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <global_stdio_init.part.0+0x30>)
 8003a08:	4c0b      	ldr	r4, [pc, #44]	@ (8003a38 <global_stdio_init.part.0+0x34>)
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a3c <global_stdio_init.part.0+0x38>)
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4620      	mov	r0, r4
 8003a10:	2200      	movs	r2, #0
 8003a12:	2104      	movs	r1, #4
 8003a14:	f7ff ff94 	bl	8003940 <std>
 8003a18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2109      	movs	r1, #9
 8003a20:	f7ff ff8e 	bl	8003940 <std>
 8003a24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a28:	2202      	movs	r2, #2
 8003a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a2e:	2112      	movs	r1, #18
 8003a30:	f7ff bf86 	b.w	8003940 <std>
 8003a34:	20000284 	.word	0x20000284
 8003a38:	2000014c 	.word	0x2000014c
 8003a3c:	080039ad 	.word	0x080039ad

08003a40 <__sfp_lock_acquire>:
 8003a40:	4801      	ldr	r0, [pc, #4]	@ (8003a48 <__sfp_lock_acquire+0x8>)
 8003a42:	f000 babc 	b.w	8003fbe <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	2000028d 	.word	0x2000028d

08003a4c <__sfp_lock_release>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	@ (8003a54 <__sfp_lock_release+0x8>)
 8003a4e:	f000 bab7 	b.w	8003fc0 <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	2000028d 	.word	0x2000028d

08003a58 <__sinit>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	f7ff fff0 	bl	8003a40 <__sfp_lock_acquire>
 8003a60:	6a23      	ldr	r3, [r4, #32]
 8003a62:	b11b      	cbz	r3, 8003a6c <__sinit+0x14>
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a68:	f7ff bff0 	b.w	8003a4c <__sfp_lock_release>
 8003a6c:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <__sinit+0x28>)
 8003a6e:	6223      	str	r3, [r4, #32]
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <__sinit+0x2c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f5      	bne.n	8003a64 <__sinit+0xc>
 8003a78:	f7ff ffc4 	bl	8003a04 <global_stdio_init.part.0>
 8003a7c:	e7f2      	b.n	8003a64 <__sinit+0xc>
 8003a7e:	bf00      	nop
 8003a80:	080039c5 	.word	0x080039c5
 8003a84:	20000284 	.word	0x20000284

08003a88 <_fwalk_sglue>:
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	4688      	mov	r8, r1
 8003a90:	4614      	mov	r4, r2
 8003a92:	2600      	movs	r6, #0
 8003a94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a98:	f1b9 0901 	subs.w	r9, r9, #1
 8003a9c:	d505      	bpl.n	8003aaa <_fwalk_sglue+0x22>
 8003a9e:	6824      	ldr	r4, [r4, #0]
 8003aa0:	2c00      	cmp	r4, #0
 8003aa2:	d1f7      	bne.n	8003a94 <_fwalk_sglue+0xc>
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d907      	bls.n	8003ac0 <_fwalk_sglue+0x38>
 8003ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	d003      	beq.n	8003ac0 <_fwalk_sglue+0x38>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	4638      	mov	r0, r7
 8003abc:	47c0      	blx	r8
 8003abe:	4306      	orrs	r6, r0
 8003ac0:	3568      	adds	r5, #104	@ 0x68
 8003ac2:	e7e9      	b.n	8003a98 <_fwalk_sglue+0x10>

08003ac4 <iprintf>:
 8003ac4:	b40f      	push	{r0, r1, r2, r3}
 8003ac6:	b507      	push	{r0, r1, r2, lr}
 8003ac8:	4906      	ldr	r1, [pc, #24]	@ (8003ae4 <iprintf+0x20>)
 8003aca:	ab04      	add	r3, sp, #16
 8003acc:	6808      	ldr	r0, [r1, #0]
 8003ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ad2:	6881      	ldr	r1, [r0, #8]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	f000 fb9f 	bl	8004218 <_vfiprintf_r>
 8003ada:	b003      	add	sp, #12
 8003adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ae0:	b004      	add	sp, #16
 8003ae2:	4770      	bx	lr
 8003ae4:	20000018 	.word	0x20000018

08003ae8 <_puts_r>:
 8003ae8:	6a03      	ldr	r3, [r0, #32]
 8003aea:	b570      	push	{r4, r5, r6, lr}
 8003aec:	6884      	ldr	r4, [r0, #8]
 8003aee:	4605      	mov	r5, r0
 8003af0:	460e      	mov	r6, r1
 8003af2:	b90b      	cbnz	r3, 8003af8 <_puts_r+0x10>
 8003af4:	f7ff ffb0 	bl	8003a58 <__sinit>
 8003af8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003afa:	07db      	lsls	r3, r3, #31
 8003afc:	d405      	bmi.n	8003b0a <_puts_r+0x22>
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	0598      	lsls	r0, r3, #22
 8003b02:	d402      	bmi.n	8003b0a <_puts_r+0x22>
 8003b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b06:	f000 fa5a 	bl	8003fbe <__retarget_lock_acquire_recursive>
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	0719      	lsls	r1, r3, #28
 8003b0e:	d502      	bpl.n	8003b16 <_puts_r+0x2e>
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d135      	bne.n	8003b82 <_puts_r+0x9a>
 8003b16:	4621      	mov	r1, r4
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 f981 	bl	8003e20 <__swsetup_r>
 8003b1e:	b380      	cbz	r0, 8003b82 <_puts_r+0x9a>
 8003b20:	f04f 35ff 	mov.w	r5, #4294967295
 8003b24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b26:	07da      	lsls	r2, r3, #31
 8003b28:	d405      	bmi.n	8003b36 <_puts_r+0x4e>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	059b      	lsls	r3, r3, #22
 8003b2e:	d402      	bmi.n	8003b36 <_puts_r+0x4e>
 8003b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b32:	f000 fa45 	bl	8003fc0 <__retarget_lock_release_recursive>
 8003b36:	4628      	mov	r0, r5
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	da04      	bge.n	8003b48 <_puts_r+0x60>
 8003b3e:	69a2      	ldr	r2, [r4, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dc17      	bgt.n	8003b74 <_puts_r+0x8c>
 8003b44:	290a      	cmp	r1, #10
 8003b46:	d015      	beq.n	8003b74 <_puts_r+0x8c>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	6022      	str	r2, [r4, #0]
 8003b4e:	7019      	strb	r1, [r3, #0]
 8003b50:	68a3      	ldr	r3, [r4, #8]
 8003b52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b56:	3b01      	subs	r3, #1
 8003b58:	60a3      	str	r3, [r4, #8]
 8003b5a:	2900      	cmp	r1, #0
 8003b5c:	d1ed      	bne.n	8003b3a <_puts_r+0x52>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da11      	bge.n	8003b86 <_puts_r+0x9e>
 8003b62:	4622      	mov	r2, r4
 8003b64:	210a      	movs	r1, #10
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 f91b 	bl	8003da2 <__swbuf_r>
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d0d7      	beq.n	8003b20 <_puts_r+0x38>
 8003b70:	250a      	movs	r5, #10
 8003b72:	e7d7      	b.n	8003b24 <_puts_r+0x3c>
 8003b74:	4622      	mov	r2, r4
 8003b76:	4628      	mov	r0, r5
 8003b78:	f000 f913 	bl	8003da2 <__swbuf_r>
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d1e7      	bne.n	8003b50 <_puts_r+0x68>
 8003b80:	e7ce      	b.n	8003b20 <_puts_r+0x38>
 8003b82:	3e01      	subs	r6, #1
 8003b84:	e7e4      	b.n	8003b50 <_puts_r+0x68>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	6022      	str	r2, [r4, #0]
 8003b8c:	220a      	movs	r2, #10
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e7ee      	b.n	8003b70 <_puts_r+0x88>
	...

08003b94 <puts>:
 8003b94:	4b02      	ldr	r3, [pc, #8]	@ (8003ba0 <puts+0xc>)
 8003b96:	4601      	mov	r1, r0
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	f7ff bfa5 	b.w	8003ae8 <_puts_r>
 8003b9e:	bf00      	nop
 8003ba0:	20000018 	.word	0x20000018

08003ba4 <setbuf>:
 8003ba4:	fab1 f281 	clz	r2, r1
 8003ba8:	0952      	lsrs	r2, r2, #5
 8003baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bae:	0052      	lsls	r2, r2, #1
 8003bb0:	f000 b800 	b.w	8003bb4 <setvbuf>

08003bb4 <setvbuf>:
 8003bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003bb8:	461d      	mov	r5, r3
 8003bba:	4b57      	ldr	r3, [pc, #348]	@ (8003d18 <setvbuf+0x164>)
 8003bbc:	681f      	ldr	r7, [r3, #0]
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	460e      	mov	r6, r1
 8003bc2:	4690      	mov	r8, r2
 8003bc4:	b127      	cbz	r7, 8003bd0 <setvbuf+0x1c>
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	b913      	cbnz	r3, 8003bd0 <setvbuf+0x1c>
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f7ff ff44 	bl	8003a58 <__sinit>
 8003bd0:	f1b8 0f02 	cmp.w	r8, #2
 8003bd4:	d006      	beq.n	8003be4 <setvbuf+0x30>
 8003bd6:	f1b8 0f01 	cmp.w	r8, #1
 8003bda:	f200 809a 	bhi.w	8003d12 <setvbuf+0x15e>
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	f2c0 8097 	blt.w	8003d12 <setvbuf+0x15e>
 8003be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003be6:	07d9      	lsls	r1, r3, #31
 8003be8:	d405      	bmi.n	8003bf6 <setvbuf+0x42>
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	059a      	lsls	r2, r3, #22
 8003bee:	d402      	bmi.n	8003bf6 <setvbuf+0x42>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bf2:	f000 f9e4 	bl	8003fbe <__retarget_lock_acquire_recursive>
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f000 fe35 	bl	8004868 <_fflush_r>
 8003bfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c00:	b141      	cbz	r1, 8003c14 <setvbuf+0x60>
 8003c02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d002      	beq.n	8003c10 <setvbuf+0x5c>
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f000 f9da 	bl	8003fc4 <_free_r>
 8003c10:	2300      	movs	r3, #0
 8003c12:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c14:	2300      	movs	r3, #0
 8003c16:	61a3      	str	r3, [r4, #24]
 8003c18:	6063      	str	r3, [r4, #4]
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	d503      	bpl.n	8003c28 <setvbuf+0x74>
 8003c20:	6921      	ldr	r1, [r4, #16]
 8003c22:	4638      	mov	r0, r7
 8003c24:	f000 f9ce 	bl	8003fc4 <_free_r>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	f1b8 0f02 	cmp.w	r8, #2
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	d061      	beq.n	8003cfe <setvbuf+0x14a>
 8003c3a:	ab01      	add	r3, sp, #4
 8003c3c:	466a      	mov	r2, sp
 8003c3e:	4621      	mov	r1, r4
 8003c40:	4638      	mov	r0, r7
 8003c42:	f000 fe39 	bl	80048b8 <__swhatbuf_r>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	4318      	orrs	r0, r3
 8003c4a:	81a0      	strh	r0, [r4, #12]
 8003c4c:	bb2d      	cbnz	r5, 8003c9a <setvbuf+0xe6>
 8003c4e:	9d00      	ldr	r5, [sp, #0]
 8003c50:	4628      	mov	r0, r5
 8003c52:	f000 fa01 	bl	8004058 <malloc>
 8003c56:	4606      	mov	r6, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d152      	bne.n	8003d02 <setvbuf+0x14e>
 8003c5c:	f8dd 9000 	ldr.w	r9, [sp]
 8003c60:	45a9      	cmp	r9, r5
 8003c62:	d140      	bne.n	8003ce6 <setvbuf+0x132>
 8003c64:	f04f 35ff 	mov.w	r5, #4294967295
 8003c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6c:	f043 0202 	orr.w	r2, r3, #2
 8003c70:	81a2      	strh	r2, [r4, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	60a2      	str	r2, [r4, #8]
 8003c76:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	6122      	str	r2, [r4, #16]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	6162      	str	r2, [r4, #20]
 8003c82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c84:	07d6      	lsls	r6, r2, #31
 8003c86:	d404      	bmi.n	8003c92 <setvbuf+0xde>
 8003c88:	0598      	lsls	r0, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <setvbuf+0xde>
 8003c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c8e:	f000 f997 	bl	8003fc0 <__retarget_lock_release_recursive>
 8003c92:	4628      	mov	r0, r5
 8003c94:	b003      	add	sp, #12
 8003c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c9a:	2e00      	cmp	r6, #0
 8003c9c:	d0d8      	beq.n	8003c50 <setvbuf+0x9c>
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	b913      	cbnz	r3, 8003ca8 <setvbuf+0xf4>
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f7ff fed8 	bl	8003a58 <__sinit>
 8003ca8:	f1b8 0f01 	cmp.w	r8, #1
 8003cac:	bf08      	it	eq
 8003cae:	89a3      	ldrheq	r3, [r4, #12]
 8003cb0:	6026      	str	r6, [r4, #0]
 8003cb2:	bf04      	itt	eq
 8003cb4:	f043 0301 	orreq.w	r3, r3, #1
 8003cb8:	81a3      	strheq	r3, [r4, #12]
 8003cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cbe:	f013 0208 	ands.w	r2, r3, #8
 8003cc2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003cc6:	d01e      	beq.n	8003d06 <setvbuf+0x152>
 8003cc8:	07d9      	lsls	r1, r3, #31
 8003cca:	bf41      	itttt	mi
 8003ccc:	2200      	movmi	r2, #0
 8003cce:	426d      	negmi	r5, r5
 8003cd0:	60a2      	strmi	r2, [r4, #8]
 8003cd2:	61a5      	strmi	r5, [r4, #24]
 8003cd4:	bf58      	it	pl
 8003cd6:	60a5      	strpl	r5, [r4, #8]
 8003cd8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cda:	07d2      	lsls	r2, r2, #31
 8003cdc:	d401      	bmi.n	8003ce2 <setvbuf+0x12e>
 8003cde:	059b      	lsls	r3, r3, #22
 8003ce0:	d513      	bpl.n	8003d0a <setvbuf+0x156>
 8003ce2:	2500      	movs	r5, #0
 8003ce4:	e7d5      	b.n	8003c92 <setvbuf+0xde>
 8003ce6:	4648      	mov	r0, r9
 8003ce8:	f000 f9b6 	bl	8004058 <malloc>
 8003cec:	4606      	mov	r6, r0
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d0b8      	beq.n	8003c64 <setvbuf+0xb0>
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf8:	81a3      	strh	r3, [r4, #12]
 8003cfa:	464d      	mov	r5, r9
 8003cfc:	e7cf      	b.n	8003c9e <setvbuf+0xea>
 8003cfe:	2500      	movs	r5, #0
 8003d00:	e7b2      	b.n	8003c68 <setvbuf+0xb4>
 8003d02:	46a9      	mov	r9, r5
 8003d04:	e7f5      	b.n	8003cf2 <setvbuf+0x13e>
 8003d06:	60a2      	str	r2, [r4, #8]
 8003d08:	e7e6      	b.n	8003cd8 <setvbuf+0x124>
 8003d0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d0c:	f000 f958 	bl	8003fc0 <__retarget_lock_release_recursive>
 8003d10:	e7e7      	b.n	8003ce2 <setvbuf+0x12e>
 8003d12:	f04f 35ff 	mov.w	r5, #4294967295
 8003d16:	e7bc      	b.n	8003c92 <setvbuf+0xde>
 8003d18:	20000018 	.word	0x20000018

08003d1c <__sread>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	460c      	mov	r4, r1
 8003d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d24:	f000 f8fc 	bl	8003f20 <_read_r>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	bfab      	itete	ge
 8003d2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d30:	181b      	addge	r3, r3, r0
 8003d32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d36:	bfac      	ite	ge
 8003d38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d3a:	81a3      	strhlt	r3, [r4, #12]
 8003d3c:	bd10      	pop	{r4, pc}

08003d3e <__swrite>:
 8003d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d42:	461f      	mov	r7, r3
 8003d44:	898b      	ldrh	r3, [r1, #12]
 8003d46:	05db      	lsls	r3, r3, #23
 8003d48:	4605      	mov	r5, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	d505      	bpl.n	8003d5c <__swrite+0x1e>
 8003d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d54:	2302      	movs	r3, #2
 8003d56:	2200      	movs	r2, #0
 8003d58:	f000 f8d0 	bl	8003efc <_lseek_r>
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	4632      	mov	r2, r6
 8003d6a:	463b      	mov	r3, r7
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d72:	f000 b8e7 	b.w	8003f44 <_write_r>

08003d76 <__sseek>:
 8003d76:	b510      	push	{r4, lr}
 8003d78:	460c      	mov	r4, r1
 8003d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7e:	f000 f8bd 	bl	8003efc <_lseek_r>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	bf15      	itete	ne
 8003d88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d92:	81a3      	strheq	r3, [r4, #12]
 8003d94:	bf18      	it	ne
 8003d96:	81a3      	strhne	r3, [r4, #12]
 8003d98:	bd10      	pop	{r4, pc}

08003d9a <__sclose>:
 8003d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9e:	f000 b89d 	b.w	8003edc <_close_r>

08003da2 <__swbuf_r>:
 8003da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da4:	460e      	mov	r6, r1
 8003da6:	4614      	mov	r4, r2
 8003da8:	4605      	mov	r5, r0
 8003daa:	b118      	cbz	r0, 8003db4 <__swbuf_r+0x12>
 8003dac:	6a03      	ldr	r3, [r0, #32]
 8003dae:	b90b      	cbnz	r3, 8003db4 <__swbuf_r+0x12>
 8003db0:	f7ff fe52 	bl	8003a58 <__sinit>
 8003db4:	69a3      	ldr	r3, [r4, #24]
 8003db6:	60a3      	str	r3, [r4, #8]
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	071a      	lsls	r2, r3, #28
 8003dbc:	d501      	bpl.n	8003dc2 <__swbuf_r+0x20>
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	b943      	cbnz	r3, 8003dd4 <__swbuf_r+0x32>
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f82b 	bl	8003e20 <__swsetup_r>
 8003dca:	b118      	cbz	r0, 8003dd4 <__swbuf_r+0x32>
 8003dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	6922      	ldr	r2, [r4, #16]
 8003dd8:	1a98      	subs	r0, r3, r2
 8003dda:	6963      	ldr	r3, [r4, #20]
 8003ddc:	b2f6      	uxtb	r6, r6
 8003dde:	4283      	cmp	r3, r0
 8003de0:	4637      	mov	r7, r6
 8003de2:	dc05      	bgt.n	8003df0 <__swbuf_r+0x4e>
 8003de4:	4621      	mov	r1, r4
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fd3e 	bl	8004868 <_fflush_r>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d1ed      	bne.n	8003dcc <__swbuf_r+0x2a>
 8003df0:	68a3      	ldr	r3, [r4, #8]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	60a3      	str	r3, [r4, #8]
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	6022      	str	r2, [r4, #0]
 8003dfc:	701e      	strb	r6, [r3, #0]
 8003dfe:	6962      	ldr	r2, [r4, #20]
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d004      	beq.n	8003e10 <__swbuf_r+0x6e>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	07db      	lsls	r3, r3, #31
 8003e0a:	d5e1      	bpl.n	8003dd0 <__swbuf_r+0x2e>
 8003e0c:	2e0a      	cmp	r6, #10
 8003e0e:	d1df      	bne.n	8003dd0 <__swbuf_r+0x2e>
 8003e10:	4621      	mov	r1, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fd28 	bl	8004868 <_fflush_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d0d9      	beq.n	8003dd0 <__swbuf_r+0x2e>
 8003e1c:	e7d6      	b.n	8003dcc <__swbuf_r+0x2a>
	...

08003e20 <__swsetup_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4b29      	ldr	r3, [pc, #164]	@ (8003ec8 <__swsetup_r+0xa8>)
 8003e24:	4605      	mov	r5, r0
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	460c      	mov	r4, r1
 8003e2a:	b118      	cbz	r0, 8003e34 <__swsetup_r+0x14>
 8003e2c:	6a03      	ldr	r3, [r0, #32]
 8003e2e:	b90b      	cbnz	r3, 8003e34 <__swsetup_r+0x14>
 8003e30:	f7ff fe12 	bl	8003a58 <__sinit>
 8003e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e38:	0719      	lsls	r1, r3, #28
 8003e3a:	d422      	bmi.n	8003e82 <__swsetup_r+0x62>
 8003e3c:	06da      	lsls	r2, r3, #27
 8003e3e:	d407      	bmi.n	8003e50 <__swsetup_r+0x30>
 8003e40:	2209      	movs	r2, #9
 8003e42:	602a      	str	r2, [r5, #0]
 8003e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4e:	e033      	b.n	8003eb8 <__swsetup_r+0x98>
 8003e50:	0758      	lsls	r0, r3, #29
 8003e52:	d512      	bpl.n	8003e7a <__swsetup_r+0x5a>
 8003e54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e56:	b141      	cbz	r1, 8003e6a <__swsetup_r+0x4a>
 8003e58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	d002      	beq.n	8003e66 <__swsetup_r+0x46>
 8003e60:	4628      	mov	r0, r5
 8003e62:	f000 f8af 	bl	8003fc4 <_free_r>
 8003e66:	2300      	movs	r3, #0
 8003e68:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	2300      	movs	r3, #0
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6923      	ldr	r3, [r4, #16]
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	f043 0308 	orr.w	r3, r3, #8
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	b94b      	cbnz	r3, 8003e9a <__swsetup_r+0x7a>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e90:	d003      	beq.n	8003e9a <__swsetup_r+0x7a>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 fd35 	bl	8004904 <__smakebuf_r>
 8003e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9e:	f013 0201 	ands.w	r2, r3, #1
 8003ea2:	d00a      	beq.n	8003eba <__swsetup_r+0x9a>
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	60a2      	str	r2, [r4, #8]
 8003ea8:	6962      	ldr	r2, [r4, #20]
 8003eaa:	4252      	negs	r2, r2
 8003eac:	61a2      	str	r2, [r4, #24]
 8003eae:	6922      	ldr	r2, [r4, #16]
 8003eb0:	b942      	cbnz	r2, 8003ec4 <__swsetup_r+0xa4>
 8003eb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003eb6:	d1c5      	bne.n	8003e44 <__swsetup_r+0x24>
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
 8003eba:	0799      	lsls	r1, r3, #30
 8003ebc:	bf58      	it	pl
 8003ebe:	6962      	ldrpl	r2, [r4, #20]
 8003ec0:	60a2      	str	r2, [r4, #8]
 8003ec2:	e7f4      	b.n	8003eae <__swsetup_r+0x8e>
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	e7f7      	b.n	8003eb8 <__swsetup_r+0x98>
 8003ec8:	20000018 	.word	0x20000018

08003ecc <memset>:
 8003ecc:	4402      	add	r2, r0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <_close_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4d06      	ldr	r5, [pc, #24]	@ (8003ef8 <_close_r+0x1c>)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	f7fc fca5 	bl	8000836 <_close>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_close_r+0x1a>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_close_r+0x1a>
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	20000288 	.word	0x20000288

08003efc <_lseek_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	@ (8003f1c <_lseek_r+0x20>)
 8003f00:	4604      	mov	r4, r0
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	602a      	str	r2, [r5, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f7fc fcba 	bl	8000884 <_lseek>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_lseek_r+0x1e>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_lseek_r+0x1e>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	20000288 	.word	0x20000288

08003f20 <_read_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d07      	ldr	r5, [pc, #28]	@ (8003f40 <_read_r+0x20>)
 8003f24:	4604      	mov	r4, r0
 8003f26:	4608      	mov	r0, r1
 8003f28:	4611      	mov	r1, r2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7fc fc64 	bl	80007fc <_read>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_read_r+0x1e>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_read_r+0x1e>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	20000288 	.word	0x20000288

08003f44 <_write_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d07      	ldr	r5, [pc, #28]	@ (8003f64 <_write_r+0x20>)
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	602a      	str	r2, [r5, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f7fc fa08 	bl	8000368 <_write>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	d102      	bne.n	8003f62 <_write_r+0x1e>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	b103      	cbz	r3, 8003f62 <_write_r+0x1e>
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
 8003f64:	20000288 	.word	0x20000288

08003f68 <__errno>:
 8003f68:	4b01      	ldr	r3, [pc, #4]	@ (8003f70 <__errno+0x8>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000018 	.word	0x20000018

08003f74 <__libc_init_array>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	4d0d      	ldr	r5, [pc, #52]	@ (8003fac <__libc_init_array+0x38>)
 8003f78:	4c0d      	ldr	r4, [pc, #52]	@ (8003fb0 <__libc_init_array+0x3c>)
 8003f7a:	1b64      	subs	r4, r4, r5
 8003f7c:	10a4      	asrs	r4, r4, #2
 8003f7e:	2600      	movs	r6, #0
 8003f80:	42a6      	cmp	r6, r4
 8003f82:	d109      	bne.n	8003f98 <__libc_init_array+0x24>
 8003f84:	4d0b      	ldr	r5, [pc, #44]	@ (8003fb4 <__libc_init_array+0x40>)
 8003f86:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb8 <__libc_init_array+0x44>)
 8003f88:	f000 fd2a 	bl	80049e0 <_init>
 8003f8c:	1b64      	subs	r4, r4, r5
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	2600      	movs	r6, #0
 8003f92:	42a6      	cmp	r6, r4
 8003f94:	d105      	bne.n	8003fa2 <__libc_init_array+0x2e>
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9c:	4798      	blx	r3
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7ee      	b.n	8003f80 <__libc_init_array+0xc>
 8003fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa6:	4798      	blx	r3
 8003fa8:	3601      	adds	r6, #1
 8003faa:	e7f2      	b.n	8003f92 <__libc_init_array+0x1e>
 8003fac:	08004a80 	.word	0x08004a80
 8003fb0:	08004a80 	.word	0x08004a80
 8003fb4:	08004a80 	.word	0x08004a80
 8003fb8:	08004a84 	.word	0x08004a84

08003fbc <__retarget_lock_init_recursive>:
 8003fbc:	4770      	bx	lr

08003fbe <__retarget_lock_acquire_recursive>:
 8003fbe:	4770      	bx	lr

08003fc0 <__retarget_lock_release_recursive>:
 8003fc0:	4770      	bx	lr
	...

08003fc4 <_free_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	2900      	cmp	r1, #0
 8003fca:	d041      	beq.n	8004050 <_free_r+0x8c>
 8003fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd0:	1f0c      	subs	r4, r1, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bfb8      	it	lt
 8003fd6:	18e4      	addlt	r4, r4, r3
 8003fd8:	f000 f8e8 	bl	80041ac <__malloc_lock>
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <_free_r+0x90>)
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	b933      	cbnz	r3, 8003ff0 <_free_r+0x2c>
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	6014      	str	r4, [r2, #0]
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fec:	f000 b8e4 	b.w	80041b8 <__malloc_unlock>
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d908      	bls.n	8004006 <_free_r+0x42>
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	1821      	adds	r1, r4, r0
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	bf01      	itttt	eq
 8003ffc:	6819      	ldreq	r1, [r3, #0]
 8003ffe:	685b      	ldreq	r3, [r3, #4]
 8004000:	1809      	addeq	r1, r1, r0
 8004002:	6021      	streq	r1, [r4, #0]
 8004004:	e7ed      	b.n	8003fe2 <_free_r+0x1e>
 8004006:	461a      	mov	r2, r3
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	b10b      	cbz	r3, 8004010 <_free_r+0x4c>
 800400c:	42a3      	cmp	r3, r4
 800400e:	d9fa      	bls.n	8004006 <_free_r+0x42>
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	1850      	adds	r0, r2, r1
 8004014:	42a0      	cmp	r0, r4
 8004016:	d10b      	bne.n	8004030 <_free_r+0x6c>
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	4401      	add	r1, r0
 800401c:	1850      	adds	r0, r2, r1
 800401e:	4283      	cmp	r3, r0
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	d1e0      	bne.n	8003fe6 <_free_r+0x22>
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	6053      	str	r3, [r2, #4]
 800402a:	4408      	add	r0, r1
 800402c:	6010      	str	r0, [r2, #0]
 800402e:	e7da      	b.n	8003fe6 <_free_r+0x22>
 8004030:	d902      	bls.n	8004038 <_free_r+0x74>
 8004032:	230c      	movs	r3, #12
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	e7d6      	b.n	8003fe6 <_free_r+0x22>
 8004038:	6820      	ldr	r0, [r4, #0]
 800403a:	1821      	adds	r1, r4, r0
 800403c:	428b      	cmp	r3, r1
 800403e:	bf04      	itt	eq
 8004040:	6819      	ldreq	r1, [r3, #0]
 8004042:	685b      	ldreq	r3, [r3, #4]
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	bf04      	itt	eq
 8004048:	1809      	addeq	r1, r1, r0
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	6054      	str	r4, [r2, #4]
 800404e:	e7ca      	b.n	8003fe6 <_free_r+0x22>
 8004050:	bd38      	pop	{r3, r4, r5, pc}
 8004052:	bf00      	nop
 8004054:	20000294 	.word	0x20000294

08004058 <malloc>:
 8004058:	4b02      	ldr	r3, [pc, #8]	@ (8004064 <malloc+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f000 b825 	b.w	80040ac <_malloc_r>
 8004062:	bf00      	nop
 8004064:	20000018 	.word	0x20000018

08004068 <sbrk_aligned>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4e0f      	ldr	r6, [pc, #60]	@ (80040a8 <sbrk_aligned+0x40>)
 800406c:	460c      	mov	r4, r1
 800406e:	6831      	ldr	r1, [r6, #0]
 8004070:	4605      	mov	r5, r0
 8004072:	b911      	cbnz	r1, 800407a <sbrk_aligned+0x12>
 8004074:	f000 fca4 	bl	80049c0 <_sbrk_r>
 8004078:	6030      	str	r0, [r6, #0]
 800407a:	4621      	mov	r1, r4
 800407c:	4628      	mov	r0, r5
 800407e:	f000 fc9f 	bl	80049c0 <_sbrk_r>
 8004082:	1c43      	adds	r3, r0, #1
 8004084:	d103      	bne.n	800408e <sbrk_aligned+0x26>
 8004086:	f04f 34ff 	mov.w	r4, #4294967295
 800408a:	4620      	mov	r0, r4
 800408c:	bd70      	pop	{r4, r5, r6, pc}
 800408e:	1cc4      	adds	r4, r0, #3
 8004090:	f024 0403 	bic.w	r4, r4, #3
 8004094:	42a0      	cmp	r0, r4
 8004096:	d0f8      	beq.n	800408a <sbrk_aligned+0x22>
 8004098:	1a21      	subs	r1, r4, r0
 800409a:	4628      	mov	r0, r5
 800409c:	f000 fc90 	bl	80049c0 <_sbrk_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d1f2      	bne.n	800408a <sbrk_aligned+0x22>
 80040a4:	e7ef      	b.n	8004086 <sbrk_aligned+0x1e>
 80040a6:	bf00      	nop
 80040a8:	20000290 	.word	0x20000290

080040ac <_malloc_r>:
 80040ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b0:	1ccd      	adds	r5, r1, #3
 80040b2:	f025 0503 	bic.w	r5, r5, #3
 80040b6:	3508      	adds	r5, #8
 80040b8:	2d0c      	cmp	r5, #12
 80040ba:	bf38      	it	cc
 80040bc:	250c      	movcc	r5, #12
 80040be:	2d00      	cmp	r5, #0
 80040c0:	4606      	mov	r6, r0
 80040c2:	db01      	blt.n	80040c8 <_malloc_r+0x1c>
 80040c4:	42a9      	cmp	r1, r5
 80040c6:	d904      	bls.n	80040d2 <_malloc_r+0x26>
 80040c8:	230c      	movs	r3, #12
 80040ca:	6033      	str	r3, [r6, #0]
 80040cc:	2000      	movs	r0, #0
 80040ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041a8 <_malloc_r+0xfc>
 80040d6:	f000 f869 	bl	80041ac <__malloc_lock>
 80040da:	f8d8 3000 	ldr.w	r3, [r8]
 80040de:	461c      	mov	r4, r3
 80040e0:	bb44      	cbnz	r4, 8004134 <_malloc_r+0x88>
 80040e2:	4629      	mov	r1, r5
 80040e4:	4630      	mov	r0, r6
 80040e6:	f7ff ffbf 	bl	8004068 <sbrk_aligned>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	4604      	mov	r4, r0
 80040ee:	d158      	bne.n	80041a2 <_malloc_r+0xf6>
 80040f0:	f8d8 4000 	ldr.w	r4, [r8]
 80040f4:	4627      	mov	r7, r4
 80040f6:	2f00      	cmp	r7, #0
 80040f8:	d143      	bne.n	8004182 <_malloc_r+0xd6>
 80040fa:	2c00      	cmp	r4, #0
 80040fc:	d04b      	beq.n	8004196 <_malloc_r+0xea>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	4639      	mov	r1, r7
 8004102:	4630      	mov	r0, r6
 8004104:	eb04 0903 	add.w	r9, r4, r3
 8004108:	f000 fc5a 	bl	80049c0 <_sbrk_r>
 800410c:	4581      	cmp	r9, r0
 800410e:	d142      	bne.n	8004196 <_malloc_r+0xea>
 8004110:	6821      	ldr	r1, [r4, #0]
 8004112:	1a6d      	subs	r5, r5, r1
 8004114:	4629      	mov	r1, r5
 8004116:	4630      	mov	r0, r6
 8004118:	f7ff ffa6 	bl	8004068 <sbrk_aligned>
 800411c:	3001      	adds	r0, #1
 800411e:	d03a      	beq.n	8004196 <_malloc_r+0xea>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	442b      	add	r3, r5
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	f8d8 3000 	ldr.w	r3, [r8]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	bb62      	cbnz	r2, 8004188 <_malloc_r+0xdc>
 800412e:	f8c8 7000 	str.w	r7, [r8]
 8004132:	e00f      	b.n	8004154 <_malloc_r+0xa8>
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	1b52      	subs	r2, r2, r5
 8004138:	d420      	bmi.n	800417c <_malloc_r+0xd0>
 800413a:	2a0b      	cmp	r2, #11
 800413c:	d917      	bls.n	800416e <_malloc_r+0xc2>
 800413e:	1961      	adds	r1, r4, r5
 8004140:	42a3      	cmp	r3, r4
 8004142:	6025      	str	r5, [r4, #0]
 8004144:	bf18      	it	ne
 8004146:	6059      	strne	r1, [r3, #4]
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	bf08      	it	eq
 800414c:	f8c8 1000 	streq.w	r1, [r8]
 8004150:	5162      	str	r2, [r4, r5]
 8004152:	604b      	str	r3, [r1, #4]
 8004154:	4630      	mov	r0, r6
 8004156:	f000 f82f 	bl	80041b8 <__malloc_unlock>
 800415a:	f104 000b 	add.w	r0, r4, #11
 800415e:	1d23      	adds	r3, r4, #4
 8004160:	f020 0007 	bic.w	r0, r0, #7
 8004164:	1ac2      	subs	r2, r0, r3
 8004166:	bf1c      	itt	ne
 8004168:	1a1b      	subne	r3, r3, r0
 800416a:	50a3      	strne	r3, [r4, r2]
 800416c:	e7af      	b.n	80040ce <_malloc_r+0x22>
 800416e:	6862      	ldr	r2, [r4, #4]
 8004170:	42a3      	cmp	r3, r4
 8004172:	bf0c      	ite	eq
 8004174:	f8c8 2000 	streq.w	r2, [r8]
 8004178:	605a      	strne	r2, [r3, #4]
 800417a:	e7eb      	b.n	8004154 <_malloc_r+0xa8>
 800417c:	4623      	mov	r3, r4
 800417e:	6864      	ldr	r4, [r4, #4]
 8004180:	e7ae      	b.n	80040e0 <_malloc_r+0x34>
 8004182:	463c      	mov	r4, r7
 8004184:	687f      	ldr	r7, [r7, #4]
 8004186:	e7b6      	b.n	80040f6 <_malloc_r+0x4a>
 8004188:	461a      	mov	r2, r3
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	42a3      	cmp	r3, r4
 800418e:	d1fb      	bne.n	8004188 <_malloc_r+0xdc>
 8004190:	2300      	movs	r3, #0
 8004192:	6053      	str	r3, [r2, #4]
 8004194:	e7de      	b.n	8004154 <_malloc_r+0xa8>
 8004196:	230c      	movs	r3, #12
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	4630      	mov	r0, r6
 800419c:	f000 f80c 	bl	80041b8 <__malloc_unlock>
 80041a0:	e794      	b.n	80040cc <_malloc_r+0x20>
 80041a2:	6005      	str	r5, [r0, #0]
 80041a4:	e7d6      	b.n	8004154 <_malloc_r+0xa8>
 80041a6:	bf00      	nop
 80041a8:	20000294 	.word	0x20000294

080041ac <__malloc_lock>:
 80041ac:	4801      	ldr	r0, [pc, #4]	@ (80041b4 <__malloc_lock+0x8>)
 80041ae:	f7ff bf06 	b.w	8003fbe <__retarget_lock_acquire_recursive>
 80041b2:	bf00      	nop
 80041b4:	2000028c 	.word	0x2000028c

080041b8 <__malloc_unlock>:
 80041b8:	4801      	ldr	r0, [pc, #4]	@ (80041c0 <__malloc_unlock+0x8>)
 80041ba:	f7ff bf01 	b.w	8003fc0 <__retarget_lock_release_recursive>
 80041be:	bf00      	nop
 80041c0:	2000028c 	.word	0x2000028c

080041c4 <__sfputc_r>:
 80041c4:	6893      	ldr	r3, [r2, #8]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	b410      	push	{r4}
 80041cc:	6093      	str	r3, [r2, #8]
 80041ce:	da08      	bge.n	80041e2 <__sfputc_r+0x1e>
 80041d0:	6994      	ldr	r4, [r2, #24]
 80041d2:	42a3      	cmp	r3, r4
 80041d4:	db01      	blt.n	80041da <__sfputc_r+0x16>
 80041d6:	290a      	cmp	r1, #10
 80041d8:	d103      	bne.n	80041e2 <__sfputc_r+0x1e>
 80041da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041de:	f7ff bde0 	b.w	8003da2 <__swbuf_r>
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	1c58      	adds	r0, r3, #1
 80041e6:	6010      	str	r0, [r2, #0]
 80041e8:	7019      	strb	r1, [r3, #0]
 80041ea:	4608      	mov	r0, r1
 80041ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <__sfputs_r>:
 80041f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f4:	4606      	mov	r6, r0
 80041f6:	460f      	mov	r7, r1
 80041f8:	4614      	mov	r4, r2
 80041fa:	18d5      	adds	r5, r2, r3
 80041fc:	42ac      	cmp	r4, r5
 80041fe:	d101      	bne.n	8004204 <__sfputs_r+0x12>
 8004200:	2000      	movs	r0, #0
 8004202:	e007      	b.n	8004214 <__sfputs_r+0x22>
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	463a      	mov	r2, r7
 800420a:	4630      	mov	r0, r6
 800420c:	f7ff ffda 	bl	80041c4 <__sfputc_r>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d1f3      	bne.n	80041fc <__sfputs_r+0xa>
 8004214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004218 <_vfiprintf_r>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	460d      	mov	r5, r1
 800421e:	b09d      	sub	sp, #116	@ 0x74
 8004220:	4614      	mov	r4, r2
 8004222:	4698      	mov	r8, r3
 8004224:	4606      	mov	r6, r0
 8004226:	b118      	cbz	r0, 8004230 <_vfiprintf_r+0x18>
 8004228:	6a03      	ldr	r3, [r0, #32]
 800422a:	b90b      	cbnz	r3, 8004230 <_vfiprintf_r+0x18>
 800422c:	f7ff fc14 	bl	8003a58 <__sinit>
 8004230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004232:	07d9      	lsls	r1, r3, #31
 8004234:	d405      	bmi.n	8004242 <_vfiprintf_r+0x2a>
 8004236:	89ab      	ldrh	r3, [r5, #12]
 8004238:	059a      	lsls	r2, r3, #22
 800423a:	d402      	bmi.n	8004242 <_vfiprintf_r+0x2a>
 800423c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800423e:	f7ff febe 	bl	8003fbe <__retarget_lock_acquire_recursive>
 8004242:	89ab      	ldrh	r3, [r5, #12]
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	d501      	bpl.n	800424c <_vfiprintf_r+0x34>
 8004248:	692b      	ldr	r3, [r5, #16]
 800424a:	b99b      	cbnz	r3, 8004274 <_vfiprintf_r+0x5c>
 800424c:	4629      	mov	r1, r5
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff fde6 	bl	8003e20 <__swsetup_r>
 8004254:	b170      	cbz	r0, 8004274 <_vfiprintf_r+0x5c>
 8004256:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004258:	07dc      	lsls	r4, r3, #31
 800425a:	d504      	bpl.n	8004266 <_vfiprintf_r+0x4e>
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	b01d      	add	sp, #116	@ 0x74
 8004262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004266:	89ab      	ldrh	r3, [r5, #12]
 8004268:	0598      	lsls	r0, r3, #22
 800426a:	d4f7      	bmi.n	800425c <_vfiprintf_r+0x44>
 800426c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800426e:	f7ff fea7 	bl	8003fc0 <__retarget_lock_release_recursive>
 8004272:	e7f3      	b.n	800425c <_vfiprintf_r+0x44>
 8004274:	2300      	movs	r3, #0
 8004276:	9309      	str	r3, [sp, #36]	@ 0x24
 8004278:	2320      	movs	r3, #32
 800427a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800427e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004282:	2330      	movs	r3, #48	@ 0x30
 8004284:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004434 <_vfiprintf_r+0x21c>
 8004288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800428c:	f04f 0901 	mov.w	r9, #1
 8004290:	4623      	mov	r3, r4
 8004292:	469a      	mov	sl, r3
 8004294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004298:	b10a      	cbz	r2, 800429e <_vfiprintf_r+0x86>
 800429a:	2a25      	cmp	r2, #37	@ 0x25
 800429c:	d1f9      	bne.n	8004292 <_vfiprintf_r+0x7a>
 800429e:	ebba 0b04 	subs.w	fp, sl, r4
 80042a2:	d00b      	beq.n	80042bc <_vfiprintf_r+0xa4>
 80042a4:	465b      	mov	r3, fp
 80042a6:	4622      	mov	r2, r4
 80042a8:	4629      	mov	r1, r5
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7ff ffa1 	bl	80041f2 <__sfputs_r>
 80042b0:	3001      	adds	r0, #1
 80042b2:	f000 80a7 	beq.w	8004404 <_vfiprintf_r+0x1ec>
 80042b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042b8:	445a      	add	r2, fp
 80042ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80042bc:	f89a 3000 	ldrb.w	r3, [sl]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 809f 	beq.w	8004404 <_vfiprintf_r+0x1ec>
 80042c6:	2300      	movs	r3, #0
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d0:	f10a 0a01 	add.w	sl, sl, #1
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	9307      	str	r3, [sp, #28]
 80042d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80042de:	4654      	mov	r4, sl
 80042e0:	2205      	movs	r2, #5
 80042e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e6:	4853      	ldr	r0, [pc, #332]	@ (8004434 <_vfiprintf_r+0x21c>)
 80042e8:	f7fb ff72 	bl	80001d0 <memchr>
 80042ec:	9a04      	ldr	r2, [sp, #16]
 80042ee:	b9d8      	cbnz	r0, 8004328 <_vfiprintf_r+0x110>
 80042f0:	06d1      	lsls	r1, r2, #27
 80042f2:	bf44      	itt	mi
 80042f4:	2320      	movmi	r3, #32
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042fa:	0713      	lsls	r3, r2, #28
 80042fc:	bf44      	itt	mi
 80042fe:	232b      	movmi	r3, #43	@ 0x2b
 8004300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004304:	f89a 3000 	ldrb.w	r3, [sl]
 8004308:	2b2a      	cmp	r3, #42	@ 0x2a
 800430a:	d015      	beq.n	8004338 <_vfiprintf_r+0x120>
 800430c:	9a07      	ldr	r2, [sp, #28]
 800430e:	4654      	mov	r4, sl
 8004310:	2000      	movs	r0, #0
 8004312:	f04f 0c0a 	mov.w	ip, #10
 8004316:	4621      	mov	r1, r4
 8004318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431c:	3b30      	subs	r3, #48	@ 0x30
 800431e:	2b09      	cmp	r3, #9
 8004320:	d94b      	bls.n	80043ba <_vfiprintf_r+0x1a2>
 8004322:	b1b0      	cbz	r0, 8004352 <_vfiprintf_r+0x13a>
 8004324:	9207      	str	r2, [sp, #28]
 8004326:	e014      	b.n	8004352 <_vfiprintf_r+0x13a>
 8004328:	eba0 0308 	sub.w	r3, r0, r8
 800432c:	fa09 f303 	lsl.w	r3, r9, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	46a2      	mov	sl, r4
 8004336:	e7d2      	b.n	80042de <_vfiprintf_r+0xc6>
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	1d19      	adds	r1, r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	9103      	str	r1, [sp, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	bfbb      	ittet	lt
 8004344:	425b      	neglt	r3, r3
 8004346:	f042 0202 	orrlt.w	r2, r2, #2
 800434a:	9307      	strge	r3, [sp, #28]
 800434c:	9307      	strlt	r3, [sp, #28]
 800434e:	bfb8      	it	lt
 8004350:	9204      	strlt	r2, [sp, #16]
 8004352:	7823      	ldrb	r3, [r4, #0]
 8004354:	2b2e      	cmp	r3, #46	@ 0x2e
 8004356:	d10a      	bne.n	800436e <_vfiprintf_r+0x156>
 8004358:	7863      	ldrb	r3, [r4, #1]
 800435a:	2b2a      	cmp	r3, #42	@ 0x2a
 800435c:	d132      	bne.n	80043c4 <_vfiprintf_r+0x1ac>
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	1d1a      	adds	r2, r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	9203      	str	r2, [sp, #12]
 8004366:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800436a:	3402      	adds	r4, #2
 800436c:	9305      	str	r3, [sp, #20]
 800436e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004444 <_vfiprintf_r+0x22c>
 8004372:	7821      	ldrb	r1, [r4, #0]
 8004374:	2203      	movs	r2, #3
 8004376:	4650      	mov	r0, sl
 8004378:	f7fb ff2a 	bl	80001d0 <memchr>
 800437c:	b138      	cbz	r0, 800438e <_vfiprintf_r+0x176>
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	eba0 000a 	sub.w	r0, r0, sl
 8004384:	2240      	movs	r2, #64	@ 0x40
 8004386:	4082      	lsls	r2, r0
 8004388:	4313      	orrs	r3, r2
 800438a:	3401      	adds	r4, #1
 800438c:	9304      	str	r3, [sp, #16]
 800438e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004392:	4829      	ldr	r0, [pc, #164]	@ (8004438 <_vfiprintf_r+0x220>)
 8004394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004398:	2206      	movs	r2, #6
 800439a:	f7fb ff19 	bl	80001d0 <memchr>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d03f      	beq.n	8004422 <_vfiprintf_r+0x20a>
 80043a2:	4b26      	ldr	r3, [pc, #152]	@ (800443c <_vfiprintf_r+0x224>)
 80043a4:	bb1b      	cbnz	r3, 80043ee <_vfiprintf_r+0x1d6>
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	3307      	adds	r3, #7
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	3308      	adds	r3, #8
 80043b0:	9303      	str	r3, [sp, #12]
 80043b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043b4:	443b      	add	r3, r7
 80043b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b8:	e76a      	b.n	8004290 <_vfiprintf_r+0x78>
 80043ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80043be:	460c      	mov	r4, r1
 80043c0:	2001      	movs	r0, #1
 80043c2:	e7a8      	b.n	8004316 <_vfiprintf_r+0xfe>
 80043c4:	2300      	movs	r3, #0
 80043c6:	3401      	adds	r4, #1
 80043c8:	9305      	str	r3, [sp, #20]
 80043ca:	4619      	mov	r1, r3
 80043cc:	f04f 0c0a 	mov.w	ip, #10
 80043d0:	4620      	mov	r0, r4
 80043d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d6:	3a30      	subs	r2, #48	@ 0x30
 80043d8:	2a09      	cmp	r2, #9
 80043da:	d903      	bls.n	80043e4 <_vfiprintf_r+0x1cc>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0c6      	beq.n	800436e <_vfiprintf_r+0x156>
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	e7c4      	b.n	800436e <_vfiprintf_r+0x156>
 80043e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e8:	4604      	mov	r4, r0
 80043ea:	2301      	movs	r3, #1
 80043ec:	e7f0      	b.n	80043d0 <_vfiprintf_r+0x1b8>
 80043ee:	ab03      	add	r3, sp, #12
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	462a      	mov	r2, r5
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <_vfiprintf_r+0x228>)
 80043f6:	a904      	add	r1, sp, #16
 80043f8:	4630      	mov	r0, r6
 80043fa:	f3af 8000 	nop.w
 80043fe:	4607      	mov	r7, r0
 8004400:	1c78      	adds	r0, r7, #1
 8004402:	d1d6      	bne.n	80043b2 <_vfiprintf_r+0x19a>
 8004404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004406:	07d9      	lsls	r1, r3, #31
 8004408:	d405      	bmi.n	8004416 <_vfiprintf_r+0x1fe>
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	059a      	lsls	r2, r3, #22
 800440e:	d402      	bmi.n	8004416 <_vfiprintf_r+0x1fe>
 8004410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004412:	f7ff fdd5 	bl	8003fc0 <__retarget_lock_release_recursive>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	065b      	lsls	r3, r3, #25
 800441a:	f53f af1f 	bmi.w	800425c <_vfiprintf_r+0x44>
 800441e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004420:	e71e      	b.n	8004260 <_vfiprintf_r+0x48>
 8004422:	ab03      	add	r3, sp, #12
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	462a      	mov	r2, r5
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <_vfiprintf_r+0x228>)
 800442a:	a904      	add	r1, sp, #16
 800442c:	4630      	mov	r0, r6
 800442e:	f000 f879 	bl	8004524 <_printf_i>
 8004432:	e7e4      	b.n	80043fe <_vfiprintf_r+0x1e6>
 8004434:	08004a44 	.word	0x08004a44
 8004438:	08004a4e 	.word	0x08004a4e
 800443c:	00000000 	.word	0x00000000
 8004440:	080041f3 	.word	0x080041f3
 8004444:	08004a4a 	.word	0x08004a4a

08004448 <_printf_common>:
 8004448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800444c:	4616      	mov	r6, r2
 800444e:	4698      	mov	r8, r3
 8004450:	688a      	ldr	r2, [r1, #8]
 8004452:	690b      	ldr	r3, [r1, #16]
 8004454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004458:	4293      	cmp	r3, r2
 800445a:	bfb8      	it	lt
 800445c:	4613      	movlt	r3, r2
 800445e:	6033      	str	r3, [r6, #0]
 8004460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004464:	4607      	mov	r7, r0
 8004466:	460c      	mov	r4, r1
 8004468:	b10a      	cbz	r2, 800446e <_printf_common+0x26>
 800446a:	3301      	adds	r3, #1
 800446c:	6033      	str	r3, [r6, #0]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	0699      	lsls	r1, r3, #26
 8004472:	bf42      	ittt	mi
 8004474:	6833      	ldrmi	r3, [r6, #0]
 8004476:	3302      	addmi	r3, #2
 8004478:	6033      	strmi	r3, [r6, #0]
 800447a:	6825      	ldr	r5, [r4, #0]
 800447c:	f015 0506 	ands.w	r5, r5, #6
 8004480:	d106      	bne.n	8004490 <_printf_common+0x48>
 8004482:	f104 0a19 	add.w	sl, r4, #25
 8004486:	68e3      	ldr	r3, [r4, #12]
 8004488:	6832      	ldr	r2, [r6, #0]
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	42ab      	cmp	r3, r5
 800448e:	dc26      	bgt.n	80044de <_printf_common+0x96>
 8004490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	3b00      	subs	r3, #0
 8004498:	bf18      	it	ne
 800449a:	2301      	movne	r3, #1
 800449c:	0692      	lsls	r2, r2, #26
 800449e:	d42b      	bmi.n	80044f8 <_printf_common+0xb0>
 80044a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044a4:	4641      	mov	r1, r8
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c8      	blx	r9
 80044aa:	3001      	adds	r0, #1
 80044ac:	d01e      	beq.n	80044ec <_printf_common+0xa4>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	f003 0306 	and.w	r3, r3, #6
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf02      	ittt	eq
 80044ba:	68e5      	ldreq	r5, [r4, #12]
 80044bc:	6833      	ldreq	r3, [r6, #0]
 80044be:	1aed      	subeq	r5, r5, r3
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	bf0c      	ite	eq
 80044c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c8:	2500      	movne	r5, #0
 80044ca:	4293      	cmp	r3, r2
 80044cc:	bfc4      	itt	gt
 80044ce:	1a9b      	subgt	r3, r3, r2
 80044d0:	18ed      	addgt	r5, r5, r3
 80044d2:	2600      	movs	r6, #0
 80044d4:	341a      	adds	r4, #26
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d11a      	bne.n	8004510 <_printf_common+0xc8>
 80044da:	2000      	movs	r0, #0
 80044dc:	e008      	b.n	80044f0 <_printf_common+0xa8>
 80044de:	2301      	movs	r3, #1
 80044e0:	4652      	mov	r2, sl
 80044e2:	4641      	mov	r1, r8
 80044e4:	4638      	mov	r0, r7
 80044e6:	47c8      	blx	r9
 80044e8:	3001      	adds	r0, #1
 80044ea:	d103      	bne.n	80044f4 <_printf_common+0xac>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7c6      	b.n	8004486 <_printf_common+0x3e>
 80044f8:	18e1      	adds	r1, r4, r3
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	2030      	movs	r0, #48	@ 0x30
 80044fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004502:	4422      	add	r2, r4
 8004504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800450c:	3302      	adds	r3, #2
 800450e:	e7c7      	b.n	80044a0 <_printf_common+0x58>
 8004510:	2301      	movs	r3, #1
 8004512:	4622      	mov	r2, r4
 8004514:	4641      	mov	r1, r8
 8004516:	4638      	mov	r0, r7
 8004518:	47c8      	blx	r9
 800451a:	3001      	adds	r0, #1
 800451c:	d0e6      	beq.n	80044ec <_printf_common+0xa4>
 800451e:	3601      	adds	r6, #1
 8004520:	e7d9      	b.n	80044d6 <_printf_common+0x8e>
	...

08004524 <_printf_i>:
 8004524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	7e0f      	ldrb	r7, [r1, #24]
 800452a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800452c:	2f78      	cmp	r7, #120	@ 0x78
 800452e:	4691      	mov	r9, r2
 8004530:	4680      	mov	r8, r0
 8004532:	460c      	mov	r4, r1
 8004534:	469a      	mov	sl, r3
 8004536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800453a:	d807      	bhi.n	800454c <_printf_i+0x28>
 800453c:	2f62      	cmp	r7, #98	@ 0x62
 800453e:	d80a      	bhi.n	8004556 <_printf_i+0x32>
 8004540:	2f00      	cmp	r7, #0
 8004542:	f000 80d1 	beq.w	80046e8 <_printf_i+0x1c4>
 8004546:	2f58      	cmp	r7, #88	@ 0x58
 8004548:	f000 80b8 	beq.w	80046bc <_printf_i+0x198>
 800454c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004554:	e03a      	b.n	80045cc <_printf_i+0xa8>
 8004556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800455a:	2b15      	cmp	r3, #21
 800455c:	d8f6      	bhi.n	800454c <_printf_i+0x28>
 800455e:	a101      	add	r1, pc, #4	@ (adr r1, 8004564 <_printf_i+0x40>)
 8004560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045d1 	.word	0x080045d1
 800456c:	0800454d 	.word	0x0800454d
 8004570:	0800454d 	.word	0x0800454d
 8004574:	0800454d 	.word	0x0800454d
 8004578:	0800454d 	.word	0x0800454d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800454d 	.word	0x0800454d
 8004584:	0800454d 	.word	0x0800454d
 8004588:	0800454d 	.word	0x0800454d
 800458c:	0800454d 	.word	0x0800454d
 8004590:	080046cf 	.word	0x080046cf
 8004594:	080045fb 	.word	0x080045fb
 8004598:	08004689 	.word	0x08004689
 800459c:	0800454d 	.word	0x0800454d
 80045a0:	0800454d 	.word	0x0800454d
 80045a4:	080046f1 	.word	0x080046f1
 80045a8:	0800454d 	.word	0x0800454d
 80045ac:	080045fb 	.word	0x080045fb
 80045b0:	0800454d 	.word	0x0800454d
 80045b4:	0800454d 	.word	0x0800454d
 80045b8:	08004691 	.word	0x08004691
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6032      	str	r2, [r6, #0]
 80045c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045cc:	2301      	movs	r3, #1
 80045ce:	e09c      	b.n	800470a <_printf_i+0x1e6>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6031      	str	r1, [r6, #0]
 80045d8:	0606      	lsls	r6, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xbc>
 80045dc:	681d      	ldr	r5, [r3, #0]
 80045de:	e003      	b.n	80045e8 <_printf_i+0xc4>
 80045e0:	0645      	lsls	r5, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xb8>
 80045e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	da03      	bge.n	80045f4 <_printf_i+0xd0>
 80045ec:	232d      	movs	r3, #45	@ 0x2d
 80045ee:	426d      	negs	r5, r5
 80045f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f4:	4858      	ldr	r0, [pc, #352]	@ (8004758 <_printf_i+0x234>)
 80045f6:	230a      	movs	r3, #10
 80045f8:	e011      	b.n	800461e <_printf_i+0xfa>
 80045fa:	6821      	ldr	r1, [r4, #0]
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	0608      	lsls	r0, r1, #24
 8004600:	f853 5b04 	ldr.w	r5, [r3], #4
 8004604:	d402      	bmi.n	800460c <_printf_i+0xe8>
 8004606:	0649      	lsls	r1, r1, #25
 8004608:	bf48      	it	mi
 800460a:	b2ad      	uxthmi	r5, r5
 800460c:	2f6f      	cmp	r7, #111	@ 0x6f
 800460e:	4852      	ldr	r0, [pc, #328]	@ (8004758 <_printf_i+0x234>)
 8004610:	6033      	str	r3, [r6, #0]
 8004612:	bf14      	ite	ne
 8004614:	230a      	movne	r3, #10
 8004616:	2308      	moveq	r3, #8
 8004618:	2100      	movs	r1, #0
 800461a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800461e:	6866      	ldr	r6, [r4, #4]
 8004620:	60a6      	str	r6, [r4, #8]
 8004622:	2e00      	cmp	r6, #0
 8004624:	db05      	blt.n	8004632 <_printf_i+0x10e>
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	432e      	orrs	r6, r5
 800462a:	f021 0104 	bic.w	r1, r1, #4
 800462e:	6021      	str	r1, [r4, #0]
 8004630:	d04b      	beq.n	80046ca <_printf_i+0x1a6>
 8004632:	4616      	mov	r6, r2
 8004634:	fbb5 f1f3 	udiv	r1, r5, r3
 8004638:	fb03 5711 	mls	r7, r3, r1, r5
 800463c:	5dc7      	ldrb	r7, [r0, r7]
 800463e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004642:	462f      	mov	r7, r5
 8004644:	42bb      	cmp	r3, r7
 8004646:	460d      	mov	r5, r1
 8004648:	d9f4      	bls.n	8004634 <_printf_i+0x110>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d10b      	bne.n	8004666 <_printf_i+0x142>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	07df      	lsls	r7, r3, #31
 8004652:	d508      	bpl.n	8004666 <_printf_i+0x142>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	6861      	ldr	r1, [r4, #4]
 8004658:	4299      	cmp	r1, r3
 800465a:	bfde      	ittt	le
 800465c:	2330      	movle	r3, #48	@ 0x30
 800465e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004662:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004666:	1b92      	subs	r2, r2, r6
 8004668:	6122      	str	r2, [r4, #16]
 800466a:	f8cd a000 	str.w	sl, [sp]
 800466e:	464b      	mov	r3, r9
 8004670:	aa03      	add	r2, sp, #12
 8004672:	4621      	mov	r1, r4
 8004674:	4640      	mov	r0, r8
 8004676:	f7ff fee7 	bl	8004448 <_printf_common>
 800467a:	3001      	adds	r0, #1
 800467c:	d14a      	bne.n	8004714 <_printf_i+0x1f0>
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	b004      	add	sp, #16
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f043 0320 	orr.w	r3, r3, #32
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	4832      	ldr	r0, [pc, #200]	@ (800475c <_printf_i+0x238>)
 8004692:	2778      	movs	r7, #120	@ 0x78
 8004694:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	6831      	ldr	r1, [r6, #0]
 800469c:	061f      	lsls	r7, r3, #24
 800469e:	f851 5b04 	ldr.w	r5, [r1], #4
 80046a2:	d402      	bmi.n	80046aa <_printf_i+0x186>
 80046a4:	065f      	lsls	r7, r3, #25
 80046a6:	bf48      	it	mi
 80046a8:	b2ad      	uxthmi	r5, r5
 80046aa:	6031      	str	r1, [r6, #0]
 80046ac:	07d9      	lsls	r1, r3, #31
 80046ae:	bf44      	itt	mi
 80046b0:	f043 0320 	orrmi.w	r3, r3, #32
 80046b4:	6023      	strmi	r3, [r4, #0]
 80046b6:	b11d      	cbz	r5, 80046c0 <_printf_i+0x19c>
 80046b8:	2310      	movs	r3, #16
 80046ba:	e7ad      	b.n	8004618 <_printf_i+0xf4>
 80046bc:	4826      	ldr	r0, [pc, #152]	@ (8004758 <_printf_i+0x234>)
 80046be:	e7e9      	b.n	8004694 <_printf_i+0x170>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f023 0320 	bic.w	r3, r3, #32
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	e7f6      	b.n	80046b8 <_printf_i+0x194>
 80046ca:	4616      	mov	r6, r2
 80046cc:	e7bd      	b.n	800464a <_printf_i+0x126>
 80046ce:	6833      	ldr	r3, [r6, #0]
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	6961      	ldr	r1, [r4, #20]
 80046d4:	1d18      	adds	r0, r3, #4
 80046d6:	6030      	str	r0, [r6, #0]
 80046d8:	062e      	lsls	r6, r5, #24
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	d501      	bpl.n	80046e2 <_printf_i+0x1be>
 80046de:	6019      	str	r1, [r3, #0]
 80046e0:	e002      	b.n	80046e8 <_printf_i+0x1c4>
 80046e2:	0668      	lsls	r0, r5, #25
 80046e4:	d5fb      	bpl.n	80046de <_printf_i+0x1ba>
 80046e6:	8019      	strh	r1, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	4616      	mov	r6, r2
 80046ee:	e7bc      	b.n	800466a <_printf_i+0x146>
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	6032      	str	r2, [r6, #0]
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	6862      	ldr	r2, [r4, #4]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7fb fd67 	bl	80001d0 <memchr>
 8004702:	b108      	cbz	r0, 8004708 <_printf_i+0x1e4>
 8004704:	1b80      	subs	r0, r0, r6
 8004706:	6060      	str	r0, [r4, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	2300      	movs	r3, #0
 800470e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004712:	e7aa      	b.n	800466a <_printf_i+0x146>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	4632      	mov	r2, r6
 8004718:	4649      	mov	r1, r9
 800471a:	4640      	mov	r0, r8
 800471c:	47d0      	blx	sl
 800471e:	3001      	adds	r0, #1
 8004720:	d0ad      	beq.n	800467e <_printf_i+0x15a>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	079b      	lsls	r3, r3, #30
 8004726:	d413      	bmi.n	8004750 <_printf_i+0x22c>
 8004728:	68e0      	ldr	r0, [r4, #12]
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	4298      	cmp	r0, r3
 800472e:	bfb8      	it	lt
 8004730:	4618      	movlt	r0, r3
 8004732:	e7a6      	b.n	8004682 <_printf_i+0x15e>
 8004734:	2301      	movs	r3, #1
 8004736:	4632      	mov	r2, r6
 8004738:	4649      	mov	r1, r9
 800473a:	4640      	mov	r0, r8
 800473c:	47d0      	blx	sl
 800473e:	3001      	adds	r0, #1
 8004740:	d09d      	beq.n	800467e <_printf_i+0x15a>
 8004742:	3501      	adds	r5, #1
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	9903      	ldr	r1, [sp, #12]
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	42ab      	cmp	r3, r5
 800474c:	dcf2      	bgt.n	8004734 <_printf_i+0x210>
 800474e:	e7eb      	b.n	8004728 <_printf_i+0x204>
 8004750:	2500      	movs	r5, #0
 8004752:	f104 0619 	add.w	r6, r4, #25
 8004756:	e7f5      	b.n	8004744 <_printf_i+0x220>
 8004758:	08004a55 	.word	0x08004a55
 800475c:	08004a66 	.word	0x08004a66

08004760 <__sflush_r>:
 8004760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	0716      	lsls	r6, r2, #28
 800476a:	4605      	mov	r5, r0
 800476c:	460c      	mov	r4, r1
 800476e:	d454      	bmi.n	800481a <__sflush_r+0xba>
 8004770:	684b      	ldr	r3, [r1, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	dc02      	bgt.n	800477c <__sflush_r+0x1c>
 8004776:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	dd48      	ble.n	800480e <__sflush_r+0xae>
 800477c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800477e:	2e00      	cmp	r6, #0
 8004780:	d045      	beq.n	800480e <__sflush_r+0xae>
 8004782:	2300      	movs	r3, #0
 8004784:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004788:	682f      	ldr	r7, [r5, #0]
 800478a:	6a21      	ldr	r1, [r4, #32]
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	d030      	beq.n	80047f2 <__sflush_r+0x92>
 8004790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	0759      	lsls	r1, r3, #29
 8004796:	d505      	bpl.n	80047a4 <__sflush_r+0x44>
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800479e:	b10b      	cbz	r3, 80047a4 <__sflush_r+0x44>
 80047a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047a8:	6a21      	ldr	r1, [r4, #32]
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b0      	blx	r6
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	d106      	bne.n	80047c2 <__sflush_r+0x62>
 80047b4:	6829      	ldr	r1, [r5, #0]
 80047b6:	291d      	cmp	r1, #29
 80047b8:	d82b      	bhi.n	8004812 <__sflush_r+0xb2>
 80047ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004864 <__sflush_r+0x104>)
 80047bc:	40ca      	lsrs	r2, r1
 80047be:	07d6      	lsls	r6, r2, #31
 80047c0:	d527      	bpl.n	8004812 <__sflush_r+0xb2>
 80047c2:	2200      	movs	r2, #0
 80047c4:	6062      	str	r2, [r4, #4]
 80047c6:	04d9      	lsls	r1, r3, #19
 80047c8:	6922      	ldr	r2, [r4, #16]
 80047ca:	6022      	str	r2, [r4, #0]
 80047cc:	d504      	bpl.n	80047d8 <__sflush_r+0x78>
 80047ce:	1c42      	adds	r2, r0, #1
 80047d0:	d101      	bne.n	80047d6 <__sflush_r+0x76>
 80047d2:	682b      	ldr	r3, [r5, #0]
 80047d4:	b903      	cbnz	r3, 80047d8 <__sflush_r+0x78>
 80047d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80047d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047da:	602f      	str	r7, [r5, #0]
 80047dc:	b1b9      	cbz	r1, 800480e <__sflush_r+0xae>
 80047de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047e2:	4299      	cmp	r1, r3
 80047e4:	d002      	beq.n	80047ec <__sflush_r+0x8c>
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7ff fbec 	bl	8003fc4 <_free_r>
 80047ec:	2300      	movs	r3, #0
 80047ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80047f0:	e00d      	b.n	800480e <__sflush_r+0xae>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b0      	blx	r6
 80047f8:	4602      	mov	r2, r0
 80047fa:	1c50      	adds	r0, r2, #1
 80047fc:	d1c9      	bne.n	8004792 <__sflush_r+0x32>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0c6      	beq.n	8004792 <__sflush_r+0x32>
 8004804:	2b1d      	cmp	r3, #29
 8004806:	d001      	beq.n	800480c <__sflush_r+0xac>
 8004808:	2b16      	cmp	r3, #22
 800480a:	d11e      	bne.n	800484a <__sflush_r+0xea>
 800480c:	602f      	str	r7, [r5, #0]
 800480e:	2000      	movs	r0, #0
 8004810:	e022      	b.n	8004858 <__sflush_r+0xf8>
 8004812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004816:	b21b      	sxth	r3, r3
 8004818:	e01b      	b.n	8004852 <__sflush_r+0xf2>
 800481a:	690f      	ldr	r7, [r1, #16]
 800481c:	2f00      	cmp	r7, #0
 800481e:	d0f6      	beq.n	800480e <__sflush_r+0xae>
 8004820:	0793      	lsls	r3, r2, #30
 8004822:	680e      	ldr	r6, [r1, #0]
 8004824:	bf08      	it	eq
 8004826:	694b      	ldreq	r3, [r1, #20]
 8004828:	600f      	str	r7, [r1, #0]
 800482a:	bf18      	it	ne
 800482c:	2300      	movne	r3, #0
 800482e:	eba6 0807 	sub.w	r8, r6, r7
 8004832:	608b      	str	r3, [r1, #8]
 8004834:	f1b8 0f00 	cmp.w	r8, #0
 8004838:	dde9      	ble.n	800480e <__sflush_r+0xae>
 800483a:	6a21      	ldr	r1, [r4, #32]
 800483c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800483e:	4643      	mov	r3, r8
 8004840:	463a      	mov	r2, r7
 8004842:	4628      	mov	r0, r5
 8004844:	47b0      	blx	r6
 8004846:	2800      	cmp	r0, #0
 8004848:	dc08      	bgt.n	800485c <__sflush_r+0xfc>
 800484a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800484e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	4407      	add	r7, r0
 800485e:	eba8 0800 	sub.w	r8, r8, r0
 8004862:	e7e7      	b.n	8004834 <__sflush_r+0xd4>
 8004864:	20400001 	.word	0x20400001

08004868 <_fflush_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	690b      	ldr	r3, [r1, #16]
 800486c:	4605      	mov	r5, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b913      	cbnz	r3, 8004878 <_fflush_r+0x10>
 8004872:	2500      	movs	r5, #0
 8004874:	4628      	mov	r0, r5
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	b118      	cbz	r0, 8004882 <_fflush_r+0x1a>
 800487a:	6a03      	ldr	r3, [r0, #32]
 800487c:	b90b      	cbnz	r3, 8004882 <_fflush_r+0x1a>
 800487e:	f7ff f8eb 	bl	8003a58 <__sinit>
 8004882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f3      	beq.n	8004872 <_fflush_r+0xa>
 800488a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800488c:	07d0      	lsls	r0, r2, #31
 800488e:	d404      	bmi.n	800489a <_fflush_r+0x32>
 8004890:	0599      	lsls	r1, r3, #22
 8004892:	d402      	bmi.n	800489a <_fflush_r+0x32>
 8004894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004896:	f7ff fb92 	bl	8003fbe <__retarget_lock_acquire_recursive>
 800489a:	4628      	mov	r0, r5
 800489c:	4621      	mov	r1, r4
 800489e:	f7ff ff5f 	bl	8004760 <__sflush_r>
 80048a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048a4:	07da      	lsls	r2, r3, #31
 80048a6:	4605      	mov	r5, r0
 80048a8:	d4e4      	bmi.n	8004874 <_fflush_r+0xc>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	059b      	lsls	r3, r3, #22
 80048ae:	d4e1      	bmi.n	8004874 <_fflush_r+0xc>
 80048b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048b2:	f7ff fb85 	bl	8003fc0 <__retarget_lock_release_recursive>
 80048b6:	e7dd      	b.n	8004874 <_fflush_r+0xc>

080048b8 <__swhatbuf_r>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c0:	2900      	cmp	r1, #0
 80048c2:	b096      	sub	sp, #88	@ 0x58
 80048c4:	4615      	mov	r5, r2
 80048c6:	461e      	mov	r6, r3
 80048c8:	da0d      	bge.n	80048e6 <__swhatbuf_r+0x2e>
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2340      	movne	r3, #64	@ 0x40
 80048d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048dc:	2000      	movs	r0, #0
 80048de:	6031      	str	r1, [r6, #0]
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	b016      	add	sp, #88	@ 0x58
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
 80048e6:	466a      	mov	r2, sp
 80048e8:	f000 f848 	bl	800497c <_fstat_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	dbec      	blt.n	80048ca <__swhatbuf_r+0x12>
 80048f0:	9901      	ldr	r1, [sp, #4]
 80048f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048fa:	4259      	negs	r1, r3
 80048fc:	4159      	adcs	r1, r3
 80048fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004902:	e7eb      	b.n	80048dc <__swhatbuf_r+0x24>

08004904 <__smakebuf_r>:
 8004904:	898b      	ldrh	r3, [r1, #12]
 8004906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004908:	079d      	lsls	r5, r3, #30
 800490a:	4606      	mov	r6, r0
 800490c:	460c      	mov	r4, r1
 800490e:	d507      	bpl.n	8004920 <__smakebuf_r+0x1c>
 8004910:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	2301      	movs	r3, #1
 800491a:	6163      	str	r3, [r4, #20]
 800491c:	b003      	add	sp, #12
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	ab01      	add	r3, sp, #4
 8004922:	466a      	mov	r2, sp
 8004924:	f7ff ffc8 	bl	80048b8 <__swhatbuf_r>
 8004928:	9f00      	ldr	r7, [sp, #0]
 800492a:	4605      	mov	r5, r0
 800492c:	4639      	mov	r1, r7
 800492e:	4630      	mov	r0, r6
 8004930:	f7ff fbbc 	bl	80040ac <_malloc_r>
 8004934:	b948      	cbnz	r0, 800494a <__smakebuf_r+0x46>
 8004936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800493a:	059a      	lsls	r2, r3, #22
 800493c:	d4ee      	bmi.n	800491c <__smakebuf_r+0x18>
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	f043 0302 	orr.w	r3, r3, #2
 8004946:	81a3      	strh	r3, [r4, #12]
 8004948:	e7e2      	b.n	8004910 <__smakebuf_r+0xc>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	6020      	str	r0, [r4, #0]
 800494e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	9b01      	ldr	r3, [sp, #4]
 8004956:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800495a:	b15b      	cbz	r3, 8004974 <__smakebuf_r+0x70>
 800495c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004960:	4630      	mov	r0, r6
 8004962:	f000 f81d 	bl	80049a0 <_isatty_r>
 8004966:	b128      	cbz	r0, 8004974 <__smakebuf_r+0x70>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	431d      	orrs	r5, r3
 8004978:	81a5      	strh	r5, [r4, #12]
 800497a:	e7cf      	b.n	800491c <__smakebuf_r+0x18>

0800497c <_fstat_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d07      	ldr	r5, [pc, #28]	@ (800499c <_fstat_r+0x20>)
 8004980:	2300      	movs	r3, #0
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	f7fb ff60 	bl	800084e <_fstat>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d102      	bne.n	8004998 <_fstat_r+0x1c>
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	b103      	cbz	r3, 8004998 <_fstat_r+0x1c>
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	bd38      	pop	{r3, r4, r5, pc}
 800499a:	bf00      	nop
 800499c:	20000288 	.word	0x20000288

080049a0 <_isatty_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	@ (80049bc <_isatty_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fb ff5f 	bl	800086e <_isatty>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_isatty_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_isatty_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000288 	.word	0x20000288

080049c0 <_sbrk_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d06      	ldr	r5, [pc, #24]	@ (80049dc <_sbrk_r+0x1c>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fb ff68 	bl	80008a0 <_sbrk>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_sbrk_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_sbrk_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	20000288 	.word	0x20000288

080049e0 <_init>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr

080049ec <_fini>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr
